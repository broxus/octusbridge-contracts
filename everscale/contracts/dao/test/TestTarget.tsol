pragma ever-solidity >= 0.62.0;

import "../../utils/Delegate.tsol";


contract TestTarget is Delegate {
    uint32 static _nonce;

    address public daoRoot;
    bool public executed;
    uint128 public value;
    uint32 public param;

    constructor(address _daoRoot) {
        tvm.accept();
        daoRoot = _daoRoot;
    }

    modifier onlyDelegate {
        checkDelegate();
        _;
    }

    function call(uint32 newParam) public pure {
        TestTarget(this).onProposalSuccess{value: 0, flag: 64}(newParam);
    }

    function addDelegate(address addr, uint callHash) public {
        require(msg.sender == daoRoot, 101);
        optional(uint[]) optDelegate = delegators.fetch(addr);
        if (optDelegate.hasValue()) {
            uint[] delegate = optDelegate.get();
            delegate.push(callHash);
            delegators[addr] = delegate;
        } else {
            delegators[addr] = [callHash];
        }
    }

    function onProposalSuccess(uint32 newParam) public onlyDelegate {
        value = msg.value;
        executed = true;
        param = newParam;
    }

    function encodePayload(address addr, uint callHash) public pure returns (TvmCell) {
        return tvm.encodeBody(addDelegate, addr, callHash);
    }

    function getCallHash(uint32 newParam) public pure returns (uint) {
        return tvm.hash(tvm.encodeBody(onProposalSuccess, newParam));
    }
}

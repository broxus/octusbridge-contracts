pragma ever-solidity >= 0.62.0;


import "./interfaces/IRelayRound.tsol";
import "./interfaces/IRoundDeployer.tsol";

import "./libraries/Gas.tsol";
import "./libraries/PlatformTypes.tsol";
import "./../utils/ErrorCodes.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/platform/Platform.tsol";


contract RelayRound is IRelayRound {
    event RelayRoundCodeUpgraded(uint32 code_version);

    bool relays_installed;
    uint32 public relays_count;
    uint32 public start_time;
    uint32 public end_time;

    uint32 round_num; // setup from initialData
    uint256[] ton_keys; // array of ton pubkeys
    uint160[] eth_addrs; // array of eth pubkeys

    uint32 current_version;
    TvmCell platform_code;

    address root; // setup from initialData

    // Cant be deployed directly
    constructor() public { revert(); }

    function getDetails() external view override responsible returns (RelayRoundDetails) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS }RelayRoundDetails(
            root, round_num, ton_keys, eth_addrs, relays_installed, current_version
        );
    }

    function relayKeys() public view responsible returns (uint256[]) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } ton_keys;
    }

    function setRelays(
        uint256[] _ton_keys,
        uint160[] _eth_keys
    ) external override {
        require (msg.sender == root, ErrorCodes.BAD_SENDER);
        require (!relays_installed, ErrorCodes.RELAY_ROUND_INITIALIZED);

        tvm.rawReserve(Gas.RELAY_ROUND_INITIAL_BALANCE, 0);

        ton_keys = _ton_keys;
        eth_addrs = _eth_keys;

        relays_count = uint32(_ton_keys.length);

        relays_installed = true;
        IRoundDeployer(root).onRelayRoundInitialized{ value: 0, flag: MsgFlag.ALL_NOT_RESERVED }(
            round_num, start_time, end_time, relays_count, eth_addrs, ton_keys
        );
    }


    // should be called root after +2 rounds!
    function destroy() external override onlyRoot {
        // small safety check
        require (block.timestamp >= end_time, ErrorCodes.RELAY_ROUND_NOT_ENDED);

        root.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function onCodeUpgrade(TvmCell upgrade_data) private {
        TvmSlice s = upgrade_data.toSlice();
        (address _root,,) = s.decode(address, uint8, address);

        TvmCell _platform_code = s.loadRef();

        TvmSlice initialData = s.loadRefAsSlice();
        uint32 _round_num = initialData.decode(uint32);

        TvmSlice params = s.loadRefAsSlice();
        (uint32 _current_version, uint32 _prev_version) = params.decode(uint32, uint32);
        // DEPLOY
        if (_current_version == _prev_version) {
            tvm.resetStorage();
            tvm.rawReserve(Gas.RELAY_ROUND_INITIAL_BALANCE, 0);

            root = _root;
            platform_code = _platform_code;
            round_num = _round_num;
            current_version = _current_version;

            start_time = params.decode(uint32);
            end_time = params.decode(uint32);
        } else {
            // UPGRADE from broken version
            tvm.rawReserve(Gas.RELAY_ROUND_INITIAL_BALANCE, 0);

            (
                relays_installed,
                relays_count,
                start_time,
                end_time,
                eth_addrs,
                ton_keys
            ) = abi.decode(
                s.loadRef(),
                (
                    bool,
                    uint32,
                    uint32,
                    uint32,
                    uint160[],
                    uint256[]
                )
            );
        }
    }

    function upgrade(TvmCell code, uint32 new_version, address send_gas_to) external onlyRoot {
        if (new_version == current_version) {
            tvm.rawReserve(Gas.RELAY_ROUND_INITIAL_BALANCE, 0);
            send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
        } else {
            emit RelayRoundCodeUpgraded(new_version);

            TvmBuilder builder;
            uint8 _tmp;
            builder.store(root); // address 267
            builder.store(_tmp); // 8
            builder.store(send_gas_to); // address 267

            builder.store(platform_code); // ref1

            TvmBuilder initial;
            initial.store(round_num); // 32

            builder.storeRef(initial); // ref2

            TvmBuilder params;
            params.store(new_version); // 32
            params.store(current_version); // 32

            builder.storeRef(params); // ref3

            TvmCell other_data = abi.encode(
                relays_installed,
                relays_count,
                start_time,
                end_time,
                eth_addrs,
                ton_keys
            );

            builder.store(other_data); // ref4

            // set code after complete this method
            tvm.setcode(code);

            // run onCodeUpgrade from new code
            tvm.setCurrentCode(code);
            onCodeUpgrade(builder.toCell());
        }
    }

    /*
    upgrade_data
        bits:
            address root
            uint8 dummy
            address send_gas_to
        refs:
            1: platform_code
            2: initial
                bits:
                    uint128 round_num
            3: params:
                bits:
                    uint32 new_version
                    uint32 current_version
            4: data
                refs:
                    1: data_1
                        bool relays_installed
                        uint32 relays_count
                        uint32 start_time
                        uint32 end_time
                        uint160[] eth_addrs
                        uint256[] ton_keys
    */

    modifier onlyRoot() {
        require(msg.sender == root, ErrorCodes.NOT_ROOT);
        _;
    }

}

pragma ever-solidity >= 0.62.0;
pragma AbiHeader pubkey;


import "./RoundDeployerBase.tsol";


abstract contract RoundDeployerUpgradable is RoundDeployerBase {
    function installPlatformOnce(TvmCell code, address send_gas_to) external onlyAdmin {
        require (msg.value >= Gas.MIN_CALL_MSG_VALUE, ErrorCodes.VALUE_TOO_LOW);
        // can be installed only once
        require(!code_data.has_platform_code, ErrorCodes.PLATFORM_CODE_NON_EMPTY);
        tvm.rawReserve(_reserve(), 0);
        code_data.platform_code = code;
        code_data.has_platform_code = true;
        send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function installOrUpdateRelayRoundCode(TvmCell code, address send_gas_to) external onlyAdmin {
        require (msg.value >= Gas.MIN_CALL_MSG_VALUE, ErrorCodes.VALUE_TOO_LOW);
        tvm.rawReserve(_reserve(), 0);
        code_data.relay_round_code = code;
        code_data.relay_round_version++;
        emit RelayRoundCodeUpgraded(code_data.relay_round_version);
        send_gas_to.transfer({ value: 0, bounce: false, flag: MsgFlag.ALL_NOT_RESERVED });
    }

    function upgradeRelayRound(
        uint32 round_num,
        address send_gas_to
    ) external onlyAdmin {
        require (msg.value >= Gas.MIN_CALL_MSG_VALUE, ErrorCodes.VALUE_TOO_LOW);
        tvm.rawReserve(_reserve(), 0);

        emit RequestedRelayRoundUpgrade(round_num);
        IUpgradableByRequest(getRelayRoundAddress(round_num)).upgrade{ value: 0, flag: MsgFlag.ALL_NOT_RESERVED }(
            code_data.relay_round_code, code_data.relay_round_version, send_gas_to
        );
    }

    function _buildRelayRoundParams(uint32 round_num) internal inline pure returns (TvmCell) {
        TvmBuilder builder;
        builder.store(round_num);
        return builder.toCell();
    }

    function getRelayRoundAddress(uint32 round_num) public view responsible returns (address) {
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } address(tvm.hash(_buildInitData(
            PlatformTypes.RelayRound,
            _buildRelayRoundParams(round_num)
        )));
    }

    // will fall if called with on origin round with time < origin round start time (which is impossible anyway)
    function getRelayRoundAddressFromTimestamp(uint32 time) public view responsible returns (address, uint32) {
        uint32 round_num = time < round_details.currentRelayRoundStartTime ? round_details.currentRelayRound - 1 : round_details.currentRelayRound;
        return { value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS } (getRelayRoundAddress(round_num), round_num);
    }
}

pragma ever-solidity >= 0.62.0;
pragma AbiHeader pubkey;
pragma AbiHeader expire;

import "./base/StakingRelay.tsol";

contract StakingV1_1 is StakingPoolRelay {
    event StakingUpdated();

    function upgrade(TvmCell code, address send_gas_to) external onlyAdmin {
        require (msg.value >= Gas.getMinCallMsgValue(), ErrorCodes.VALUE_TOO_LOW);

        TvmCell data = abi.encode(
            send_gas_to, // address
            code_data.has_platform_code, // bool
            code_data.user_data_version, // 32
            code_data.election_version, // 32
            code_data.relay_round_version, // 32
            code_data.platform_code, // ref1
            code_data.user_data_code, // ref2
            code_data.election_code, // ref3
            code_data.relay_round_code, // ref4
            deploy_nonce, // 32
            deployer, // address 267
            base_details.dao_root, // address 267
            base_details.bridge_event_config_eth_ton, // address 267
            active, // 1
            round_details.currentRelayRound, // 32
            round_details.currentRelayRoundStartTime, // 32
            round_details.currentRelayRoundEndTime, // 32
            round_details.currentElectionStartTime, // 32
            lastExtCall, // 32
            round_details.currentElectionEnded, // 1
            base_details.bridge_event_config_ton_eth, // address 267
            base_details.lastRewardTime, // 32
            base_details.tokenRoot, // address 267
            base_details.tokenWallet, // address 267
            base_details.tokenBalance, // 128
            base_details.emergency, // 1
            base_details.rewardRounds,
            base_details.rewardTokenBalance, // 128
            base_details.admin, // address 267
            base_details.rewarder, // address 267
            base_details.rescuer, // address 267
            relay_config.relayLockTime, // 32
            relay_config.relayRoundTime, // 32
            relay_config.electionTime, // 32
            relay_config.timeBeforeElection, // 32
            relay_config.minRoundGapTime, // 32
            relay_config.relaysCount, // 16
            relay_config.minRelaysCount, // 16
            relay_config.minRelayDeposit, // 128
            relay_config.relayInitialTonDeposit, // 128
            relay_config.userRewardPerSecond, // 128
            relay_config.relayRewardPerSecond, // 128
            tonEthEventDeployValue, // 128
            deposit_nonce, // 64
            deposits // mapping
        );

        // set code after complete this method
        tvm.setcode(code);

        // run onCodeUpgrade from new code
        tvm.setCurrentCode(code);
        onCodeUpgrade(data);
    }

    function sendRelaysToRelayRound(
        uint32 relay_round,
        uint256[] _ton_keys,
        uint160[] _eth_addrs,
        address[] _staker_addrs,
        uint128[] _staked_tokens
    ) external onlyAdmin {
        require (msg.value >= Gas.getMinCallMsgValue(), ErrorCodes.VALUE_TOO_LOW);
        tvm.rawReserve(_reserve(), 0);

        address relay_round_addr = getRelayRoundAddress(relay_round);
        IStakingRelayRound(relay_round_addr).setRelays{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            _ton_keys, _eth_addrs, _staker_addrs, _staked_tokens
        );
    }

    function onCodeUpgrade(TvmCell) private pure {
        emit StakingUpdated();
    }
}

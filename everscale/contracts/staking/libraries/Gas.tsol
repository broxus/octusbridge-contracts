pragma ever-solidity >= 0.62.0;

library Gas {
    uint64 constant ROOT_INITIAL_BALANCE = 2 ever;
    uint64 constant USER_DATA_INITIAL_BALANCE = 2 ever;
    uint64 constant ELECTION_INITIAL_BALANCE = 2 ever;
    uint64 constant RELAY_ROUND_INITIAL_BALANCE = 2 ever;
    uint64 constant TOKEN_WALLET_INITIAL_BALANCE = 0.1 ever;

    // deploy
    uint64 constant TOKEN_WALLET_DEPLOY_GAS = 200_000;
    uint64 constant TOKEN_WALLET_EXTRA_GAS = 100_000;

    uint64 constant DEPLOY_ELECTION_MIN_GAS = 1_000_000;
    uint64 constant DEPLOY_RELAY_ROUND_MIN_GAS = 1_000_000;
    uint64 constant DEPLOY_USER_DATA_MIN_GAS = 1_000_000;
    uint64 constant USER_DATA_UPGRADE_GAS = 3_000_000;

    uint64 constant LINK_RELAY_ACCOUNTS_GAS = 200_000;

    function getDeployTokenWalletValue() public returns(uint128) {
        return gasToValue(TOKEN_WALLET_DEPLOY_GAS, address(this).wid) + TOKEN_WALLET_INITIAL_BALANCE;
    }

    function getDeployRelayRoundMinValue() public returns(uint128) {
        return gasToValue(DEPLOY_RELAY_ROUND_MIN_GAS, address(this).wid) + RELAY_ROUND_INITIAL_BALANCE;
    }

    function getDeployElectionMinValue() public returns(uint128) {
        return gasToValue(DEPLOY_ELECTION_MIN_GAS, address(this).wid) + ELECTION_INITIAL_BALANCE;
    }

    function getDeployUserDataMinValue() public returns(uint128) {
        return gasToValue(DEPLOY_USER_DATA_MIN_GAS, address(this).wid) + USER_DATA_INITIAL_BALANCE;
    }

    // min values for calls
    uint64 constant MIN_CALL_MSG_GAS = 8_000_000;
    uint64 constant MIN_CALL_MSG_FIXED_VALUE = 2 ever;
    uint64 constant MIN_END_ELECTION_MSG_GAS = 15_000_000;
    uint64 constant MIN_SEND_RELAYS_MSG_GAS = 2_000_000;
    uint64 constant DESTROY_MSG_GAS = 1_000_000;

    function getMinCallMsgValue() public returns(uint128) {
        return gasToValue(MIN_CALL_MSG_GAS, address(this).wid) + MIN_CALL_MSG_FIXED_VALUE;
    }

    function getMinEndElectionMsgValue() public returns(uint128) {
        return gasToValue(MIN_END_ELECTION_MSG_GAS, address(this).wid) +
               getDeployRelayRoundMinValue() +
               math.max(RELAY_ROUND_INITIAL_BALANCE, ELECTION_INITIAL_BALANCE); // stakingRelay.onRelayRoundDeployed
    }

    // DAO
    uint64 constant CAST_VOTE_GAS = 1_000_000;
    uint64 constant UNLOCK_LOCKED_VOTE_TOKENS_GAS = 500_000;
    uint64 constant UNLOCK_CASTED_VOTE_GAS = 200_000;
    uint64 constant UNLOCK_CASTED_VOTES_EXTRA_GAS = 1_000_000;
}

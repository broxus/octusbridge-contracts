pragma ever-solidity >= 0.62.0;

import "../../bridge/interfaces/event-contracts/multivault/evm/IEVMCallback.tsol";

abstract contract MultiVaultEventCellEncoder is IEVMCallback {
    function encodeCancelPredeployedTokenDataPayload(
        string _name,
        string _symbol,
        uint8 _decimals
    ) public pure returns (TvmCell data) {
        data = abi.encode(_name, _symbol, _decimals);
    }

    function encodeProvideLiquidityPayloadTvmTvmAlien(
        address _newRecipient,
        address _remainingGasTo,
        uint128 _expectedGas,
        optional(TvmCell) _eventPayload,
        string _name,
        string _symbol,
        uint8 _decimals
    ) public pure returns (TvmCell data) {
        TvmCell predeployedTokenData = encodeCancelPredeployedTokenDataPayload(_name, _symbol, _decimals);

        data = abi.encode(
            _newRecipient,
            _remainingGasTo,
            _expectedGas,
            _eventPayload,
            predeployedTokenData
        );
    }

    function encodeProvideLiquidityPayloadTvmTvmNative(
        address _newRecipient,
        address _remainingGasTo,
        uint128 _expectedGas,
        optional(TvmCell) _eventPayload
    ) public pure returns (TvmCell data) {
        data = abi.encode(
            _newRecipient,
            _remainingGasTo,
            _expectedGas,
            _eventPayload
        );
    }

    function encodeProvideLiquidityPayloadEvmTvmNative(
        uint160 _newRecipient,
        address _remainingGasTo,
        IEVMCallback _callback
    ) public pure returns (TvmCell data) {
        data = abi.encode(
            _newRecipient,
            _remainingGasTo,
            _callback
        );
    }
}

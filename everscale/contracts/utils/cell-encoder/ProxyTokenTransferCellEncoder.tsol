pragma ever-solidity >= 0.62.0;

/*
    Ad hoc contract, used to perform encode / decode TvmCell.
    Not implemented in the Everscale-SDK at the moment of creation.
    @important Not strictly connected to the ERC20<->TIP3 token transfers, just an example.
*/
contract ProxyTokenTransferCellEncoder {
    function encodeEthereumEverscaleEventData(
        uint256 tokens,
        int128 wid,
        uint256 owner_addr
    ) public pure returns(
        TvmCell data
    ) {
        TvmBuilder builder;

        builder.store(tokens, wid, owner_addr);

        data = builder.toCell();
    }

    function encodeSolanaEverscaleEventData(
        uint256 sender_addr,
        uint128 tokens,
        address receiver_addr
    ) public pure returns(
        TvmCell data
    ) {
        TvmBuilder builder;

        builder.store(sender_addr, tokens, receiver_addr);

        data = builder.toCell();
    }

    function decodeEthereumEverscaleEventData(
        TvmCell data
    ) public pure returns(
        uint128 tokens,
        int8 wid,
        uint256 owner_addr
    ) {
        (
            uint256 _amount,
            int128 _wid,
            uint256 _addr
        ) = data.toSlice().load(uint256, int128, uint256);
        return (uint128(_amount), int8(_wid), _addr);
    }

    function decodeSolanaEverscaleEventData(
        TvmCell data
    ) public pure returns(
        uint256 sender_addr,
        uint128 tokens,
        address receiver_addr
    ) {
        (
            sender_addr,
            tokens,
            receiver_addr
        ) = data.toSlice().load(uint256, uint128, address);
    }

    function encodeEverscaleEthereumEventData(
        int8 wid,
        uint addr,
        uint128 tokens,
        uint160 ethereum_address,
        uint32 chainId
    ) public pure returns(
        TvmCell data
    ) {
        TvmBuilder builder;

        builder.store(wid, addr, tokens, ethereum_address, chainId);

        data = builder.toCell();
    }

    function encodeEverscaleSolanaEventData(
        address senderAddress,
        uint128 tokens,
        uint256 solanaOwnerAddress
    ) public pure returns(
        TvmCell data
    ) {
        TvmBuilder builder;

        builder.store(senderAddress, tokens, solanaOwnerAddress);

        data = builder.toCell();
    }

    function decodeEverscaleEthereumEventData(
        TvmCell data
    ) public pure returns(
        int8 wid,
        uint addr,
        uint128 tokens,
        uint160 ethereum_address,
        uint32 chainId
    ) {
        (
            wid,
            addr,
            tokens,
            ethereum_address,
            chainId
        ) = data.toSlice().load(int8, uint, uint128, uint160, uint32);
    }

    function decodeEverscaleSolanaEventData(
        TvmCell data
    ) public pure returns(
        address senderAddress,
        uint128 tokens,
        uint256 solanaOwnerAddress
    ) {
        (
            senderAddress,
            tokens,
            solanaOwnerAddress
        ) = data.toSlice().load(address, uint128, uint256);
    }
}

// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "../../../event-contracts/multivault/evm/IEVMCallback.tsol";
import "../../INetworks.tsol";


interface IProxyMultiVaultNative_V7 is IEVMCallback, INetworks {
    struct EVMConfiguration {
        address everscaleConfiguration;
        address[] evmConfigurations;
    }

    struct SolanaConfiguration {
        address everscaleConfiguration;
        address solanaConfiguration;
    }

    struct TVMConfiguration {
        address[] incomingConfigurations;
        TvmCell eventAddressKeeperCode;
        Fees defaultFee;
        mapping(address => Fees) fees;
        TvmCell tokenFeeCode;
    }

    struct Fees {
        uint32 incoming; // deposit
        uint32 outgoing; // withdraw
    }

    // Settings
    function apiVersion() external view responsible returns(uint8);
    function getConfiguration() external view responsible returns (EVMConfiguration, SolanaConfiguration);
    function setEVMConfiguration(EVMConfiguration _config, address gasBackAddress) external;
    function setSolanaConfiguration(SolanaConfiguration _config, address gasBackAddress) external;
    function setTVMConfiguration(address[] _incomingConfigurations, address gasBackAddress) external;
    function setTVMEventAddressKeeperCode(TvmCell _eventAddressKeeperCode, address gasBackAddress) external;

    // fee
    function getTvmDefaultFee() external view responsible returns(uint32 incomingNumerator,uint32 outgoingNumerator, uint32 denominator);
    function getTvmTokenFee(address _token) external view responsible returns(uint32 incomingNumerator, uint32 outgoingNumerator, uint32 denominator);
    function getExpectedTokenFeeAddress(address _token)external responsible view returns(address);
    function getPlatformCode() external view responsible returns(TvmCell);
    function getTokenFeeCode() external view responsible returns(TvmCell);

    function setTvmDefaultFeeNumerator(uint32 _incoming, uint32 _outgoing) external;
    function setPlatformCode(TvmCell _code) external;
    function setTokenFeeCode(TvmCell _code) external;
    function setTvmTokenFee(address _token, uint32 _incoming, uint32 _outgoing) external;

    function deleteTvmTokenFee(address _token) external;
    function withdrawTokenFee(address _token, address _recipient) external;
    function upgradeTokenFee(address _token, address _remainingGasTo) external view;

    // Events specification
    event TvmTvmNative(
        int32 destinationChainId,

        address baseToken,
        string name,
        string symbol,
        uint8 decimals,
        address nativeProxyWallet,

        address sender,
        address recipient,
        uint128 amount,

        uint256 attachedGas,
        uint128 expectedGas,
        address remainingGasTo,
        optional(TvmCell) payload
    );

    event incomingFeeTaken(uint128 fee, address token, uint256 msgHash);
    event outgoingFeeTaken(uint128 fee, address token);
}

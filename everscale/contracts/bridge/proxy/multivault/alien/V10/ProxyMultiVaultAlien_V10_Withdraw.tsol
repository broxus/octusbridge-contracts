// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;


import "./../../../../interfaces/event-contracts/IEverscaleSolanaEvent.tsol";
import "./../../../../interfaces/event-contracts/IEverscaleEthereumEvent.tsol";

import "./../../../../interfaces/event-configuration-contracts/IEverscaleSolanaEventConfiguration.tsol";
import "./../../../../interfaces/event-configuration-contracts/IEverscaleEthereumEventConfiguration.tsol";

import "./../../../../interfaces/proxy/IEvmEventCancelled.tsol";
import "./../../../../interfaces/proxy/ITvmEventCancelled.tsol";

import "./ProxyMultiVaultAlien_V10_Deposit_EVM.tsol";

import "ton-eth-bridge-token-contracts/contracts/interfaces/IAcceptTokensBurnCallback.tsol";


abstract contract ProxyMultiVaultAlien_V10_Withdraw is
    ProxyMultiVaultAlien_V10_Deposit_EVM,
    IAcceptTokensBurnCallback,
    IEvmEventCancelled,
    ITvmEventCancelled
{
    /// @notice Handles token burn.
    /// Initializes alien transfer (eg BSC CAKE or ETH AAVE).
    /// @param amount Tokens amount
    /// @param remainingGasTo Address to send remaining gas to
    /// @param payload TvmCell encoded (uint160 recipient)
    function onAcceptTokensBurn(
        uint128 amount,
        address sender,
        address,
        address remainingGasTo,
        TvmCell payload
    ) public override reserveAtLeastTargetBalance {
        (
            uint32 nonce,
            Network network,
            TvmCell burnPayload
        ) = abi.decode(payload, (uint32, Network, TvmCell));

        (
            bool isLimitReached,
            optional(DailyLimits) newLimits
        ) = _isOutgoingDailyLimitReached(msg.sender, amount);

        if (isLimitReached) {
            emit OutgoingLimitReached(msg.sender);

            TvmCell empty;

            _mintTokens(
                msg.sender,
                amount,
                sender,
                sender,
                empty,
                null
            );

            return;
        }

        _updateDailyVolumes(msg.sender, newLimits);

        if (network == Network.Solana) {
            (
                uint256 recipient,
                IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
                bool executePayloadNeeded,
                IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
                bytes solanaPayload
            ) = abi.decode(burnPayload, (uint256, IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[], bool, IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[], bytes));

            _deploySolanaEvent(
                nonce,
                msg.sender,
                amount,
                recipient,
                sender,
                remainingGasTo,
                executeAccounts,
                executePayloadNeeded,
                executePayloadAccounts,
                solanaPayload
            );
        } else if (network == Network.EVM) {
            (
                uint160 recipient,
                EVMCallback callback
            ) = abi.decode(burnPayload, (uint160, EVMCallback));

            _deployEVMEvent(
                nonce,
                msg.sender,
                amount,
                recipient,
                remainingGasTo,
                sender,
                callback
            );
        } else if (network == Network.TVM) {
            _emitTVMEvent(
                nonce,
                msg.sender,
                amount,
                remainingGasTo,
                sender,
                burnPayload,
                false
            );
        }
    }

    function onEVMEventCancelled(
        IEthereumEverscaleEvent.EthereumEverscaleEventInitData /*eventData*/,
        TvmCell withdrawPayload
    ) external override reserveAtLeastTargetBalance {
        require(
            _isArrayContainsAddress(evmConfiguration.evmConfigurations, msg.sender),
            ErrorCodes.NOT_ETHEREUM_CONFIG
        );

        (
            uint128 amount,
            address sender,
            uint160 recipient,
            address tokenRoot,
            address remainingGasTo,
            EVMCallback callback
        ) = abi.decode(withdrawPayload, (
            uint128,
            address,
            uint160,
            address,
            address,
            EVMCallback
        ));

        _deployEVMEvent(
            0,
            tokenRoot,
            amount,
            recipient,
            remainingGasTo,
            sender,
            callback
        );
    }

    function onTVMEventCancelled(
        ITvmTvmEvent.TvmTvmEventInitData _eventInitData,
        TvmCell _withdrawPayload
    ) external override reserveAtLeastTargetBalance {
        require(
            _isArrayContainsAddress(tvmConfiguration.incomingConfigurations, msg.sender),
            ErrorCodes.NOT_TVM_CONFIG
        );

        (
            address token,
            uint128 amount,
            address sender,
            address remainingGasTo,
            address nativeProxyWallet,
            TvmCell transferData
        ) = abi.decode(_withdrawPayload, (
            address,
            uint128,
            address,
            address,
            address,
            TvmCell
        ));

        if (nativeProxyWallet.value != 0) {
            ITvmEventCancelled(proxyMultiVaultNative)
                .onTVMEventCancelled{
                    flag: MsgFlag.ALL_NOT_RESERVED
                }(_eventInitData, _withdrawPayload);

            return;
        }

        (
            address recipient,
            uint128 expectedGas,
            optional(TvmCell) eventPayload
        ) = abi.decode(transferData, (
            address,
            uint128,
            optional(TvmCell)
        ));

        _emitTVMEvent(
            0,
            token,
            amount,
            remainingGasTo,
            sender,
            abi.encode(recipient, expectedGas, eventPayload),
            true
        );
    }

    function _deploySolanaEvent(
        uint32 nonce,
        address token,
        uint128 amount,
        uint256 recipient,
        address sender,
        address remainingGasTo,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
        bool executePayloadNeeded,
        IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
        bytes solanaPayload
    ) internal view {
        TvmCell eventData = abi.encode(
            nonce,
            address(this), // Proxy address, used in event contract for validating token root
            msg.sender, // Token wallet address, must be validated in the event contract
            token, // Everscale token root address
            remainingGasTo, // Remaining gas receiver (on event contract destroy)
            amount, // Amount of tokens to withdraw
            recipient, // Recipient address in Solana network
            sender,
            solanaPayload
        );

        IEverscaleSolanaEvent.EverscaleSolanaEventVoteData eventVoteData = IEverscaleSolanaEvent.EverscaleSolanaEventVoteData(
            tx.logicaltime,
            block.timestamp,
            executeAccounts,
            executePayloadNeeded,
            executePayloadAccounts,
            eventData
        );

        IEverscaleSolanaEventConfiguration(solanaConfiguration.everscaleConfiguration).deployEvent{
            value: 0,
            bounce: false,
            flag: MsgFlag.ALL_NOT_RESERVED
        }(eventVoteData);
    }

    function _deployEVMEvent(
        uint32 nonce,
        address token,
        uint128 amount,
        uint160 recipient,
        address remainingGasTo,
        address sender,
        EVMCallback callback
    ) internal view {
        TvmCell eventData = abi.encode(
            nonce,
            address(this), // Proxy address, used in event contract for validating token root
            token, // Everscale token root address
            remainingGasTo, // Remaining gas receiver (on event contract destroy)
            amount, // Amount of tokens to withdraw
            recipient, // Recipient address in EVM network
            sender,
            callback.recipient,
            callback.payload,
            callback.strict
        );

        IEverscaleEthereumEvent.EverscaleEthereumEventVoteData eventVoteData = IEverscaleEthereumEvent.EverscaleEthereumEventVoteData(
            tx.logicaltime,
            block.timestamp,
            eventData
        );

        IEverscaleEthereumEventConfiguration(evmConfiguration.everscaleConfiguration).deployEvent{
                value: 0,
                bounce: false,
                flag: MsgFlag.ALL_NOT_RESERVED
        }(eventVoteData);
    }

    function _emitTVMEvent(
        uint32 /*nonce*/,
        address token,
        uint128 amount,
        address remainingGasTo,
        address sender,
        TvmCell withdrawPayload,
        bool isCancel
    ) internal pure {
        TvmCell payload = abi.encode(
//            nonce,
            amount,
            remainingGasTo,
            sender,
            withdrawPayload,
            isCancel
        );

        ITokenRootAlienTVM(token).meta{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            callback: ProxyMultiVaultAlien_V10_Withdraw.receiveTokenRootAlienTvmMeta
        }(payload);
    }

    function receiveTokenRootAlienTvmMeta(
        int32 baseChainId,
        address baseToken,
        address baseNativeProxyWallet,
        string name,
        string symbol,
        uint8 decimals,
        TvmCell payload
    ) public reserveAtLeastTargetBalance {
        require(
            msg.sender == deriveTVMAlienTokenRoot(baseChainId, baseToken, baseNativeProxyWallet, name, symbol, decimals),
            ErrorCodes.BAD_SENDER
        );

        (
//            uint32 nonce,
            uint128 amount,
            address remainingGasTo,
            address sender,
            TvmCell withdrawPayload,
            bool isCancel
        ) = abi.decode(payload, (
//            uint32,
            uint128,
            address,
            address,
            TvmCell,
            bool
        ));

        (
            address recipient,
            uint128 expectedGas,
            optional(TvmCell) eventPayload
        ) = abi.decode(withdrawPayload, (
            address,
            uint128,
            optional(TvmCell)
        ));

        // accumulate fee
        uint128 fee = 0;
        if (!isCancel) {
            fee = _calculateFeesWithdraw(amount, msg.sender);
            _accumulateFee(fee, msg.sender);

            emit OutgoingFeeTaken(fee, msg.sender);
        }

        emit TvmTvmAlien(
            baseChainId,

            baseToken,
            name,
            symbol,
            decimals,
            baseNativeProxyWallet,

            sender,
            recipient,
            amount - fee,

            msg.value, //todo subtract the cost of the current transaction
            expectedGas,
            remainingGasTo,
            eventPayload
        );

        remainingGasTo.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS,
            bounce: false
        });
    }
}

// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "../../../../interfaces/event-contracts/ITvmTvmEvent.tsol";
import "../../../../interfaces/proxy/ITvmTvmProxyExtended.tsol";
import "../../../../libraries/EventContractNonce.tsol";

import "./ProxyMultiVaultAlien_V9_Fees.tsol";

abstract contract ProxyMultiVaultAlien_V9_Deposit_TVM is
    ProxyMultiVaultAlien_V9_Fees,
    ITvmTvmProxyExtended
{
    function onTVMEventConfirmedExtended(
        ITvmTvmEvent.TvmTvmEventInitData eventInitData,
        TvmCell meta,
        address remainingGasTo
    ) external override reserveAtLeastTargetBalance {
        require(
            _isArrayContainsAddress(tvmConfiguration.incomingConfigurations, msg.sender),
            ErrorCodes.NOT_TVM_CONFIG
        );

        (
            address token,
            uint128 amount,
            address recipient,
            optional(TvmCell) payload,
            address eventContract,
            optional(address) nativeProxyTokenWallet
        ) = abi.decode(meta, (
            address,
            uint128,
            address,
            optional(TvmCell),
            address,
            optional(address)
        ));


        // accumulate fee
        uint128 fee = _calculateFees(amount, token);
        _accumulateFee(fee, token);

        if (nativeProxyTokenWallet.hasValue()) {
            TvmCell _meta = abi.encode(
                nativeProxyTokenWallet.get(),
                amount - fee,
                recipient,
                payload,
                eventContract
            );

            ITvmTvmProxyExtended(proxyMultiVaultNative).onTVMEventConfirmedExtended{
                flag: MsgFlag.ALL_NOT_RESERVED
            }(eventInitData, _meta, remainingGasTo);

            return;
        }

        uint32 nonce = EventContractNonce._calculateNonce(eventInitData);

        _mintTokens(
            token,
            amount - fee,
            recipient,
            remainingGasTo,
            abi.encode(nonce, payload)
        );
    }
}

// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;


import "../../../../interfaces/proxy/multivault/alien/IProxyMultiVaultAlien_V9.tsol";

import "./../../../../../utils/TransferUtils.tsol";
import "./../../../../../utils/ErrorCodes.tsol";


import "@broxus/contracts/contracts/access/InternalOwner.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


abstract contract ProxyMultivaultAlien_V9_Base is IProxyMultiVaultAlien_V9, TransferUtils, InternalOwner {
    SolanaConfiguration solanaConfiguration;
    EVMConfiguration evmConfiguration;
    TVMConfiguration tvmConfiguration;

    uint8 api_version = 0;

    address public manager;
    TvmCell public mergeRouter;
    TvmCell public mergePool;
    TvmCell public mergePoolPlatform;

    uint8 public mergePoolVersion;

    address public proxyMultiVaultNative;

    uint32 constant FEE_DENOMINATOR = 100_000;
    TvmCell platformCode;

    function getConfiguration()
        override
        external
        view
        responsible
        returns (EVMConfiguration, SolanaConfiguration, TVMConfiguration)
    {
        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } (evmConfiguration, solanaConfiguration, tvmConfiguration);
    }

    function getPredeployedTokenData(address token)
        override
        external
        view
        responsible
        returns (address, optional(PredeployedTokenData))
    {
        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } (proxyMultiVaultNative, tvmConfiguration.predeployedTokens.fetch(token));
    }


    function getPredeployedTokens()
        external
        view
        responsible
        returns (mapping(address => PredeployedTokenData))
    {
        return {
            value: 0,
            bounce: false,
            flag: MsgFlag.REMAINING_GAS
        } (tvmConfiguration.predeployedTokens);
    }

    function setProxyMultiVaultNative(address _proxyMultiVaultNative) external onlyOwner cashBack {
        proxyMultiVaultNative = _proxyMultiVaultNative;
    }

    function setEVMConfiguration(
        address _everscaleConfiguration,
        address[] _evmConfigurations,
        address _remainingGasTo
    ) override external onlyOwner cashBackTo(_remainingGasTo) {
        evmConfiguration.everscaleConfiguration = _everscaleConfiguration;
        evmConfiguration.evmConfigurations = _evmConfigurations;
    }

    function setEVMAlienTokenRootCode(TvmCell _tokenRootCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        evmConfiguration.alienTokenRootCode = _tokenRootCode;
    }

    function setEVMAlienTokenWalletCode(TvmCell _tokenWalletCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        evmConfiguration.alienTokenWalletCode = _tokenWalletCode;
    }

    function setOnceEVMAlienTokenPlatformCode(TvmCell _tokenPlatformCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        require(
            evmConfiguration.alienTokenWalletPlatformCode.toSlice().empty(),
            ErrorCodes.PLATFORM_CODE_NON_EMPTY
        );

        evmConfiguration.alienTokenWalletPlatformCode = _tokenPlatformCode;
    }

    function setSolanaConfiguration(
        address _everscaleConfiguration,
        address _solanaConfiguration,
        address _remainingGasTo
    ) override external onlyOwner cashBackTo(_remainingGasTo) {
        solanaConfiguration.everscaleConfiguration = _everscaleConfiguration;
        solanaConfiguration.solanaConfiguration = _solanaConfiguration;
    }

    function setSolanaAlienTokenRootCode(TvmCell _tokenRootCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        solanaConfiguration.alienTokenRootCode = _tokenRootCode;
    }

    function setSolanaAlienTokenWalletCode(TvmCell _tokenWalletCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        solanaConfiguration.alienTokenWalletCode = _tokenWalletCode;
    }

    function setOnceSolanaAlienTokenPlatformCode(TvmCell _tokenPlatformCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        require(
            solanaConfiguration.alienTokenWalletPlatformCode.toSlice().empty(),
            ErrorCodes.PLATFORM_CODE_NON_EMPTY
        );

        solanaConfiguration.alienTokenWalletPlatformCode = _tokenPlatformCode;
    }

    function setTVMConfiguration(
        address[] _incomingConfigurations,
        address _remainingGasTo
    ) override external onlyOwner cashBackTo(_remainingGasTo) {
        tvmConfiguration.incomingConfigurations = _incomingConfigurations;
    }

    function addPredeployedTVMToken(
        address _incomingExternal,
        PredeployedTokenData _tokenData,
        address _remainingGasTo
    ) external override onlyOwner cashBackTo(_remainingGasTo) {
        tvmConfiguration.predeployedTokens[_incomingExternal] = _tokenData;
    }

    function removePredeployedTVMToken(
        address _incomingExternal,
        address _remainingGasTo
    ) external override onlyOwner cashBackTo(_remainingGasTo) {
        delete tvmConfiguration.predeployedTokens[_incomingExternal];
    }

    function setTVMAlienTokenRootCode(TvmCell _tokenRootCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        tvmConfiguration.alienTokenRootCode = _tokenRootCode;
    }

    function setTVMAlienTokenWalletCode(TvmCell _tokenWalletCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        tvmConfiguration.alienTokenWalletCode = _tokenWalletCode;
    }

    function setOnceTVMAlienTokenPlatformCode(TvmCell _tokenPlatformCode, address _remainingGasTo)
        override
        external
        onlyOwner
        cashBackTo(_remainingGasTo)
    {
        require(
            tvmConfiguration.alienTokenWalletPlatformCode.toSlice().empty(),
            ErrorCodes.PLATFORM_CODE_NON_EMPTY
        );

        tvmConfiguration.alienTokenWalletPlatformCode = _tokenPlatformCode;
    }

    /// @notice Set merge manager
    /// Can be called only by `owner`
    /// @param _manager Manager address
    function setManager(
        address _manager
    ) external override onlyOwner cashBack {
        manager = _manager;
    }

    function _isArrayContainsAddress(
        address[] array,
        address searchElement
    ) internal pure returns (bool) {
        for (address value: array) {
            if (searchElement == value) {
                return true;
            }
        }

        return false;
    }
}

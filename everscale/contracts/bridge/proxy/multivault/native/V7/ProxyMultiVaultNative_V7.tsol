// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;


import "./../../../../interfaces/proxy/multivault/native/IProxyMultiVaultNative_V7.tsol";
import "./ProxyMultiVaultNative_V7_Deposit.tsol";

import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";


contract ProxyMultiVaultNative_V7 is ProxyMultiVaultNative_V7_Deposit, CheckPubKey, RandomNonce {
    constructor(address owner_) checkPubKey {
        tvm.accept();

        setOwnership(owner_);
    }

    function upgrade(
        TvmCell code
    ) external onlyOwner {
        TvmCell data = abi.encode(
            evmConfiguration,
            solanaConfiguration,
            tvmConfiguration,
            owner,
            api_version,
            dex_middleware,
            proxyMultiVaultAlien,
            _randomNonce,
            defaultFeeNumerator,
            fees,
            platformCode,
            bridgeTokenFeeCode
        );

        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(TvmCell data) /*functionID(2)*/ private {
        tvm.resetStorage();

        (
            EVMConfiguration evmConfiguration_,
            SolanaConfiguration solanaConfiguration_,
            // TVMConfiguration tvmConfiguration_,
            address owner_,
            uint8 api_version_,
            address dex_middleware_,
            // address proxyMultiVaultAlien_,
            uint _randomNonce_/*,
            uint128 defaultFeeNumerator_,
            mapping(address => uint128) fees_,
            TvmCell platformCode_,
            TvmCell bridgeTokenFeeCode_*/
        ) = abi.decode(
            data,
            (
                EVMConfiguration, SolanaConfiguration, /* TVMConfiguration, */
                address, uint8, address, /* address, */ uint/*, uint128, mapping(address => uint128), TvmCell, TvmCell */
            )
        );

        evmConfiguration = evmConfiguration_;
        solanaConfiguration = solanaConfiguration_;
        // tvmConfiguration = tvmConfiguration_;

        api_version = api_version_ + 1;
        dex_middleware = dex_middleware_;
        // proxyMultiVaultAlien = proxyMultiVaultAlien_;
        setOwnership(owner_);
        _randomNonce = _randomNonce_;

//        defaultFeeNumerator =defaultFeeNumerator_;
//        fees = fees_;
//        platformCode = platformCode_;
//        bridgeTokenFeeCode = bridgeTokenFeeCode_;
    }
}

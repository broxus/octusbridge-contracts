pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./../base/evm/EverscaleEthereumBaseEvent.tsol";
import "./../../../utils/cell-encoder/ProxyTokenTransferCellEncoder.tsol";
import "./../../interfaces/IEventNotificationReceiver.tsol";
import "./../../interfaces/event-contracts/IEverscaleEthereumEvent.tsol";
import "./../../../utils/ErrorCodes.tsol";
import '@broxus/contracts/contracts/libraries/MsgFlag.tsol';


contract TokenTransferEverscaleEthereumEvent is EverscaleEthereumBaseEvent, ProxyTokenTransferCellEncoder {
    constructor(
        address _initializer,
        TvmCell _meta
    ) EverscaleEthereumBaseEvent(_initializer, _meta) {}

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function close() external override view {
        require(status() != Status.Pending || block.timestamp > createdAt + FORCE_CLOSE_TIMEOUT, ErrorCodes.EVENT_PENDING);
        address ownerAddress = getOwner();

        require(msg.sender == ownerAddress, ErrorCodes.SENDER_IS_NOT_EVENT_OWNER);
        transferAll(ownerAddress);
    }

    function onInit() override internal {
        notifyEventStatusChanged();

        loadRelays();
    }

    function onConfirm() override internal {
        notifyEventStatusChanged();
    }

    function onReject() override internal {
        notifyEventStatusChanged();
    }

    function getOwner() private view returns(address) {
        (,,,,address ownerAddress,) = getDecodedData();
        return ownerAddress;
    }

    /*
        @dev Get decoded event data
        @returns rootToken Token root contract address
        @returns wid Tokens sender address workchain ID
        @returns addr Token sender address body
        @returns tokens How much tokens to mint
        @returns ethereum_address Token receiver Ethereum address
        @returns owner_address Token receiver address (derived from the wid and owner_addr)
    */
    function getDecodedData() public view responsible returns (
        int8 wid,
        uint256 addr,
        uint128 tokens,
        uint160 ethereum_address,
        address owner_address,
        uint32 chainId
    ) {
        (
        wid,
        addr,
        tokens,
        ethereum_address,
        chainId
        ) = decodeEverscaleEthereumEventData(eventInitData.voteData.eventData);

        owner_address = address.makeAddrStd(wid, addr);

        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} (
            wid,
            addr,
            tokens,
            ethereum_address,
            owner_address,
            chainId
        );
    }

    /*
        @dev Notify owner contract that event contract status has been changed
        @dev In this example, notification receiver is derived from the configuration meta
        @dev Used to easily collect all confirmed events by user's wallet
    */
    function notifyEventStatusChanged() internal view {
        address owner = getOwner();

        if (owner.value != 0) {
            IEventNotificationReceiver(owner).notifyEventStatusChanged{
                flag: 0,
                bounce: false
            }(status());
        }
    }
}

pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./../BaseEvent.tsol";
import "../../../interfaces/event-contracts/IEthereumEverscaleEvent.tsol";

import "./../../../../utils/ErrorCodes.tsol";
import "../../../libraries/EventContractNonce.tsol";


contract EthereumEverscaleBaseEvent is BaseEvent, IEthereumEverscaleEvent {
    // Event data
    EthereumEverscaleEventInitData static eventInitData;
    uint32 public nonce;

    event Confirm(uint relay);

    /// @dev Should be deployed only by corresponding EthereumEverscaleEventConfiguration contract
    /// @param _initializer The address who paid for contract deployment.
    /// Receives all contract balance at the end of event contract lifecycle.
    constructor(
        address _initializer,
        TvmCell _meta
    ) {
        require(
            eventInitData.configuration == msg.sender,
            ErrorCodes.SENDER_NOT_EVENT_CONFIGURATION
        );

        nonce = EventContractNonce._calculateNonce(eventInitData);
        initializer = _initializer;
        meta = _meta;

        onInit();
    }

    function getEventInitData() public view responsible returns (EthereumEverscaleEventInitData) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} eventInitData;
    }

    function getStakingAddress() override internal view returns (address) {
        return eventInitData.staking;
    }

    function isExternalVoteCall(uint32 functionId) override internal view returns (bool){
        return functionId == tvm.functionId(confirm) || functionId == tvm.functionId(reject);
    }

    /// @dev Confirm event. Can be called only by relay which is in charge at this round.
    /// Can be called only when event configuration is in Pending status
    /// @param voteReceiver Should be always equal to the event contract address
    function confirm(address voteReceiver) public externalMsg eventPending {
        _checkVoteReceiver(voteReceiver);

        // This check was made in afterSignatureCheck
        // require(votes[relay] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);

        tvm.accept();

        uint relay = msg.pubkey();

        votes[relay] = Vote.Confirm;
        confirms++;

        emit Confirm(relay);

        if (confirms >= requiredVotes) {
            setStatusConfirmed();

            onConfirm();
        }
    }

    /// @dev Reject event. Can be called only by relay which is in charge at this round.
    /// Can be called only when event configuration is in Pending status. If enough rejects collected
    /// changes status to Rejected, notifies tokens receiver and withdraw balance to initializer.
    /// @param voteReceiver Should be always equal to the event contract address
    function reject(address voteReceiver) public externalMsg eventPending {
        _checkVoteReceiver(voteReceiver);

        // This check was made in afterSignatureCheck
        // require(votes[relay] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);

        tvm.accept();

        uint relay = msg.pubkey();

        votes[relay] = Vote.Reject;
        rejects++;

        emit Reject(relay);

        if (rejects >= requiredVotes) {
            setStatusRejected(0);

            onReject();
        }
    }

    /// @dev Get event details
    /// @return _eventInitData Init data
    /// @return _status Current event status
    /// @return _confirms List of relays who have confirmed event
    /// @return _rejects List of relays who have rejected event
    /// @return empty List of relays who have not voted
    /// @return balance This contract's balance
    /// @return _initializer Account who has deployed this contract
    /// @return _meta Meta data from the corresponding event configuration
    /// @return _requiredVotes The required amount of votes to confirm / reject event.
    /// Basically it's 2/3 + 1 relays for this round
    function getDetails() external view responsible returns (
        EthereumEverscaleEventInitData _eventInitData,
        Status _status,
        uint[] _confirms,
        uint[] _rejects,
        uint[] empty,
        uint128 balance,
        address _initializer,
        TvmCell _meta,
        uint32 _requiredVotes
    ) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} (
            eventInitData,
            status(),
            getVoters(Vote.Confirm),
            getVoters(Vote.Reject),
            getVoters(Vote.Empty),
            address(this).balance,
            initializer,
            meta,
            requiredVotes
        );
    }
}

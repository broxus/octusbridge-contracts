pragma ever-solidity >= 0.62.0;

pragma AbiHeader pubkey;
pragma AbiHeader expire;

import "ton-eth-bridge-token-contracts/contracts/interfaces/ITokenRoot.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/ITokenWallet.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/IAcceptTokensTransferCallback.tsol";

import "./../../../interfaces/event-contracts/multivault/evm/IMultiVaultEVMEverscaleEventNative.tsol";
import "./../../../interfaces/event-contracts/multivault/evm/IEVMCallback.tsol";
import "./../../../interfaces/event-configuration-contracts/IEthereumEverscaleEventConfiguration.tsol";
import "./../../../interfaces/proxy/IEthereumEverscaleProxyExtended.tsol";
import "./../../../interfaces/proxy/IEvmEventCancelled.tsol";

import "./../../base/evm/EthereumEverscaleBaseEvent.tsol";


contract MultiVaultEVMEverscaleEventNative is
    EthereumEverscaleBaseEvent,
    IMultiVaultEVMEverscaleEventNative,
    IAcceptTokensTransferCallback
{
    address public token;
    uint128 public amount;
    address public recipient;

    uint public value;
    uint public expected_evers;
    TvmCell public payload;

    // Derived fields
    address public proxy;
    address public tokenWallet;

    uint128 public bounty;
    address public eventTokenWallet;

    constructor(
        address _initializer,
        TvmCell _meta
    ) EthereumEverscaleBaseEvent(_initializer, _meta) {}

    function onReject() virtual override internal {
        transferAll(initializer);
    }

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function onInit() override internal {
        int8 token_wid;
        uint256 token_addr;

        int8 recipient_wid;
        uint256 recipient_addr;

        (
            token_wid,
            token_addr,
            amount,
            recipient_wid,
            recipient_addr,

            value,
            expected_evers,
            payload
        ) = abi.decode(
            eventInitData.voteData.eventData,
            (
                int8, uint256, uint128, int8, uint256,
                uint256, uint256, TvmCell
            )
        );

        token = address.makeAddrStd(token_wid, token_addr);
        recipient = address.makeAddrStd(recipient_wid, recipient_addr);

        // Destroy event contract in case event contract is less than required
        if (address(this).balance < expected_evers) {
            initializer.transfer({
                value: 0,
                bounce: false,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
            });

            return;
        }

        IEthereumEverscaleEventConfiguration(eventInitData.configuration).getDetails{
            value: gasToValue(Gas.REQUEST_CONFIGURATION_DETAILS_GAS, address(this).wid),
            callback: MultiVaultEVMEverscaleEventNative.receiveConfigurationDetails
        }();
    }

    function receiveConfigurationDetails(
        IBasicEventConfiguration.BasicConfiguration,
        IEthereumEverscaleEventConfiguration.EthereumEverscaleEventConfiguration _networkConfiguration,
        TvmCell
    ) external override {
        require(msg.sender == eventInitData.configuration, ErrorCodes.SENDER_NOT_EVENT_CONFIGURATION);

        proxy = _networkConfiguration.proxy;

        ITokenRoot(token).walletOf{
            value: gasToValue(Gas.GET_TOKEN_DATA_GAS, address(this).wid),
            callback: MultiVaultEVMEverscaleEventNative.receiveProxyTokenWallet
        }(proxy);
    }

    function receiveProxyTokenWallet(
        address tokenWallet_
    ) external override {
        require(msg.sender == token, ErrorCodes.SENDER_NOT_ROOT);

        tokenWallet = tokenWallet_;

        loadRelays();
    }

    function getDecodedData() external override responsible returns(
        address token_,
        uint128 amount_,
        address recipient_,
        uint value_,
        uint expected_evers_,
        TvmCell payload_,
        address proxy_,
        address tokenWallet_
    ) {
        return {value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS}(
            token,
            amount,
            recipient,
            value,
            expected_evers,
            payload,
            proxy,
            tokenWallet
        );
    }

    function onConfirm() internal override {
        TvmCell metaData = abi.encode(
            tokenWallet,
            amount,
            recipient,
            payload
        );

        IEthereumEverscaleProxyExtended(eventInitData.configuration).onEventConfirmedExtended{
            flag: MsgFlag.ALL_NOT_RESERVED
        }(eventInitData, metaData, initializer);
    }

    function notEnoughLiquidity() external override {
        require(msg.sender == proxy, ErrorCodes.SENDER_NOT_PROXY);

        if (eventTokenWallet.value == 0) {
            ITokenRoot(token).walletOf{
                    value: 0,
                    flag: MsgFlag.REMAINING_GAS,
                    callback: MultiVaultEVMEverscaleEventNative.receiveEventTokenWallet
                }(address(this));
        } else {
            _setStatusLiquidityRequested(bounty);
        }
    }

    function cancel(
        uint160 _newRecipient,
        address _remainingGasTo,
        IEVMCallback.EVMCallback _callback
    ) external {
        require(msg.sender == recipient, ErrorCodes.SENDER_NOT_RECIPIENT);

        _setStatusCancelled();

        TvmCell withdrawPayload = abi.encode(
            amount,
            _newRecipient,
            recipient,
            _callback,
            token,
            _remainingGasTo
        );

        IEvmEventCancelled(eventInitData.configuration)
            .onEVMEventCancelled{
                flag: MsgFlag.ALL_NOT_RESERVED
            }(eventInitData, withdrawPayload);
    }

    function setBounty(uint128 _bounty) external {
        require(status() == Status.LiquidityRequested, ErrorCodes.WRONG_STATUS);
        require(msg.sender == recipient, ErrorCodes.SENDER_NOT_RECIPIENT);
        require(bounty <= amount, ErrorCodes.WRONG_BOUNTY);

        bounty = _bounty;

        emit LiquidityRequested(bounty);
    }

    function receiveEventTokenWallet(
        address tokenWallet_
    ) external {
        require(msg.sender == token, ErrorCodes.SENDER_NOT_ROOT);

        eventTokenWallet = tokenWallet_;
        _setStatusLiquidityRequested(bounty);
    }

    function onAcceptTokensTransfer(
        address /*_tokenRoot*/,
        uint128 _amount,
        address _sender,
        address /*senderWallet*/,
        address /*_remainingGasTo*/,
        TvmCell _payload
    ) override external {
        require(msg.sender == eventTokenWallet, ErrorCodes.SENDER_NOT_TOKEN_WALLET);

        // return tokens to sender in case of wrong amount or incorrect status
        if (status() != Status.LiquidityRequested || _amount < amount - bounty) {
            TvmCell empty;

            ITokenWallet(eventTokenWallet).transfer{
                value: 0,
                bounce: false,
                flag: MsgFlag.REMAINING_GAS
            }(
                _amount,
                _sender,
                0,
                _sender,
                false,
                empty
            );

            return;
        }

        _setStatusLiquidityProvided(_sender);

        // send tokens to original recipient
        ITokenWallet(eventTokenWallet).transfer{
            value: address(this).balance - msg.value,
            bounce: false,
            flag: MsgFlag.SENDER_PAYS_FEES
        }(
            _amount,
            recipient,
            Gas.getDeployTokenWalletValue(),
            recipient,
            payload.toSlice().empty() ? false : true,
            payload
        );

        // emit withdraw event to original chainId
        (
            uint160 _newRecipient,
            address _remainingGasTo,
            IEVMCallback.EVMCallback _callback
        ) = abi.decode(_payload, (
            uint160,
            address,
            IEVMCallback.EVMCallback
        ));

        TvmCell withdrawPayload = abi.encode(
            amount,
            _newRecipient,
            recipient,
            _callback,
            token,
            _remainingGasTo
        );

        IEvmEventCancelled(eventInitData.configuration)
            .onEVMEventCancelled{
                flag: MsgFlag.ALL_NOT_RESERVED
            }(eventInitData, withdrawPayload);
    }

    function retry() external {
        require(
            msg.sender == recipient || msg.sender == initializer,
            ErrorCodes.SENDER_NOT_RECIPIENT
        );

        setStatusConfirmed();
        onConfirm();
    }
}

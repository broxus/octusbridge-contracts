pragma ever-solidity >= 0.62.0;

pragma AbiHeader pubkey;
pragma AbiHeader expire;

import "./../../../interfaces/event-contracts/multivault/evm/IMultiVaultEverscaleEVMEventAlien.tsol";
import "./../../../interfaces/proxy/multivault/alien/IProxyMultiVaultAlien_V8.tsol";
import "./../../../interfaces/alien-token/ITokenRootAlienEVM.tsol";

import "./../../base/evm/EverscaleEthereumBaseEvent.tsol";


/// @notice Everscale-EVM event for MultiVault alien token transfer.
/// Before switching into the `Pending` status, event contract must perform
/// the following actions:
/// - Obtain the `token` token source.
contract MultiVaultEverscaleEVMEventAlien is
    EverscaleEthereumBaseEvent,
    IMultiVaultEverscaleEVMEventAlien
{
    uint32 public nonce;
    address public proxy;
    address public token;
    address public remainingGasTo;
    uint128 public amount;
    uint160 public recipient;

    address public sender;
    uint128 public initial_balance;

    uint160 public callback_recipient;
    bytes public callback_payload;
    bool public callback_strict;

    // Derived values
    uint256 public base_chainId;
    uint160 public base_token;
    address public expectedToken;

    // Unmodified event data
    TvmCell public unmodifiedEventData;

    constructor(
        address _initializer,
        TvmCell _meta
    ) EverscaleEthereumBaseEvent(_initializer, _meta) {
        unmodifiedEventData = eventInitData.voteData.eventData;
    }

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function getUnmodifiedEventData() external override responsible returns(TvmCell) {
        return {value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} unmodifiedEventData;
    }

    function onInit() override internal {
        (
            nonce, proxy, token, remainingGasTo, amount, recipient, sender,
            callback_recipient, callback_payload, callback_strict
        ) = abi.decode(
            eventInitData.voteData.eventData,
            (
                uint32, address, address, address, uint128, uint160, address,
                uint160, bytes, bool
            )
        );

        initial_balance = address(this).balance;

        ITokenRootAlienEVM(token).meta{
            value: gasToValue(Gas.GET_TOKEN_ROOT_META_GAS, address(this).wid),
            bounce: true,
            callback: MultiVaultEverscaleEVMEventAlien.receiveTokenMeta
        }();
    }

    function receiveTokenMeta(
        uint256 base_chainId_,
        uint160 base_token_,
        string name,
        string symbol,
        uint8 decimals
    ) external override {
        require(msg.sender == token, ErrorCodes.SENDER_NOT_ROOT);

        base_chainId = base_chainId_;
        base_token = base_token_;

        IProxyMultiVaultAlien_V8(proxy).deriveEVMAlienTokenRoot{
            value: gasToValue(Gas.DERIVE_TOKEN_ROOT_GAS, address(this).wid),
            bounce: true,
            callback: MultiVaultEverscaleEVMEventAlien.receiveAlienTokenRoot
        }(
            base_chainId,
            base_token,
            name,
            symbol,
            decimals
        );
    }

    function receiveAlienTokenRoot(
        address token_
    ) external override {
        require(msg.sender == proxy, ErrorCodes.SENDER_NOT_ROOT);

        expectedToken = token_;

        if (expectedToken == token) {
            _updateEventData();

            loadRelays();
        } else {
            setStatusRejected(1);
        }
    }

    function _updateEventData() internal {
        eventInitData.voteData.eventData = abi.encode(
            base_token,
            amount,
            recipient,
            base_chainId,
            callback_recipient,
            callback_payload,
            callback_strict
        );
    }

    function getDecodedData() external override responsible returns(
        address proxy_,
        address token_,
        address remainingGasTo_,
        uint128 amount_,
        uint160 recipient_,
        EVMCallback callback,
        uint256 base_chainId_,
        uint160 base_token_
    ) {
        return {value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS}(
            proxy,
            token,
            remainingGasTo,
            amount,
            recipient,
            EVMCallback(
                callback_recipient,
                callback_payload,
                callback_strict
            ),
            base_chainId,
            base_token
        );
    }

    function gasBackAddress() internal override view returns(address) {
        return remainingGasTo;
    }

    onBounce(TvmSlice slice) external {
        uint32 selector = slice.load(uint32);

        if (
            (selector == tvm.functionId(ITokenRootAlienEVM.meta) && msg.sender == token) ||
            (selector == tvm.functionId(IProxyMultiVaultAlien_V8.deriveEVMAlienTokenRoot) && msg.sender == proxy)
        ) {
            setStatusRejected(2);
        }
    }
}

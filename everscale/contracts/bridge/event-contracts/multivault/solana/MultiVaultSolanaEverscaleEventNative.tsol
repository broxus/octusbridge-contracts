pragma ever-solidity >= 0.62.0;

pragma AbiHeader pubkey;
pragma AbiHeader expire;

import "ton-eth-bridge-token-contracts/contracts/interfaces/ITokenRoot.tsol";

import "./../../../interfaces/event-contracts/multivault/solana/IMultiVaultSolanaEverscaleEventNative.tsol";
import "./../../../interfaces/event-configuration-contracts/ISolanaEverscaleEventConfiguration.tsol";
import "./../../../interfaces/proxy/ISolanaEverscaleProxyExtended.tsol";

import "./../../base/solana/SolanaEverscaleBaseEvent.tsol";


contract MultiVaultSolanaEverscaleEventNative is
    SolanaEverscaleBaseEvent,
    IMultiVaultSolanaEverscaleEventNative
{
    address token;
    uint128 amount;
    address recipient;

    uint64 value;
    uint expected_evers;
    TvmCell payload;

    address proxy;
    address tokenWallet;

    address public limitApprover;
    bool public isLimitApproved;

    modifier onlyLimitApprover() {
        require(msg.sender == limitApprover && limitApprover.value != 0, ErrorCodes.SENDER_IS_NOT_LIMIT_APPROVER);
        _;
    }

    constructor(
        address _initializer,
        TvmCell _meta
    ) SolanaEverscaleBaseEvent(_initializer, _meta) {}

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function onInit() override internal {
        (
            token,
            amount,
            recipient,

            value,
            expected_evers,
            payload
        ) = abi.decode(
            eventInitData.voteData.eventData,
            (
                address, uint128, address,
                uint64, uint, TvmCell
            )
        );

        // Destroy event contract in case event contract is less than required
        if (address(this).balance < expected_evers) {
            recipient.transfer({
                value: 0,
                bounce: false,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
            });

            return;
        }

    ISolanaEverscaleEventConfiguration(eventInitData.configuration).getDetails{
            value: gasToValue(Gas.REQUEST_CONFIGURATION_DETAILS_GAS, address(this).wid),
            callback: MultiVaultSolanaEverscaleEventNative.receiveConfigurationDetails
        }();
    }

    function receiveConfigurationDetails(
        ISolanaEverscaleEventConfiguration.BasicConfiguration,
        ISolanaEverscaleEventConfiguration.SolanaEverscaleEventConfiguration _networkConfiguration,
        TvmCell
    ) external override {
        require(msg.sender == eventInitData.configuration);

        proxy = _networkConfiguration.proxy;

        ITokenRoot(token).walletOf{
            value: gasToValue(Gas.GET_TOKEN_DATA_GAS, address(this).wid),
            callback: MultiVaultSolanaEverscaleEventNative.receiveProxyTokenWallet
        }(proxy);
    }

    function receiveProxyTokenWallet(
        address tokenWallet_
    ) external override {
        require(msg.sender == token);

        tokenWallet = tokenWallet_;

        loadRelays();
    }

    function getDecodedData() external override responsible returns(
        address token_,
        uint128 amount_,
        address recipient_,
        uint64 value_,
        uint expected_evers_,
        TvmCell payload_,
        address proxy_,
        address tokenWallet_
    ) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false}(
            token,
            amount,
            recipient,
            value,
            expected_evers,
            payload,
            proxy,
            tokenWallet
        );
    }

    function dailyLimitReached(address _approver) external override {
        require(msg.sender == proxy && proxy.value != 0, ErrorCodes.SENDER_NOT_PROXY);

        _setStatusLimitApprove(_approver);

        limitApprover = _approver;
    }

    function approveLimit() external onlyLimitApprover {
        isLimitApproved = true;

        setStatusConfirmed();
        onConfirm();
    }

    function rejectLimit() external onlyLimitApprover {
        setStatusRejected(3);
        onReject();
    }

    function onConfirm() internal override {
        TvmCell metaData = abi.encode(
            address(this),
            isLimitApproved,
            tokenWallet,
            amount,
            recipient,
            payload
        );

        ISolanaEverscaleProxyExtended(eventInitData.configuration).onSolanaEventConfirmedExtended{
            flag: MsgFlag.ALL_NOT_RESERVED
        }(eventInitData, metaData, initializer);
    }
}

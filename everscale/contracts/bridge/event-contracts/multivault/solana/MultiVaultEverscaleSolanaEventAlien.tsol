pragma ever-solidity >= 0.62.0;
pragma AbiHeader time;
pragma AbiHeader pubkey;
pragma AbiHeader expire;


import "./../../../interfaces/event-contracts/multivault/solana/IMultiVaultEverscaleSolanaEventAlien.tsol";
import "./../../../interfaces/proxy/multivault/alien/IProxyMultiVaultAlien_V8.tsol";
import "./../../../interfaces/alien-token/ITokenRootAlienSolana.tsol";

import "./../../base/solana/EverscaleSolanaBaseEvent.tsol";


/// @notice Everscale-Solana event for MultiVault alien token transfer.
/// Before switching into the `Pending` status, event contract must perform
/// the following actions:
/// - Obtain the `token` token source.
contract MultiVaultEverscaleSolanaEventAlien is
    EverscaleSolanaBaseEvent,
    IMultiVaultEverscaleSolanaEventAlien
{
    uint32 public nonce;
    address public proxy;
    address public token;
    address public tokenWallet;
    address public remainingGasTo;
    uint128 public amount;
    uint256 public recipient;

    address public sender;
    uint128 public initial_balance;

    uint256 public base_token;
    address public expectedToken;
    bytes public solanaPayload;

    constructor(
        address _initializer,
        TvmCell _meta
    ) EverscaleSolanaBaseEvent(_initializer, _meta) public {}

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.decode(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.decode(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function onInit() override internal {
        (nonce, proxy, tokenWallet, token, remainingGasTo, amount, recipient, sender, solanaPayload) = abi.decode(
            eventInitData.voteData.eventData,
            (uint32, address, address, address, address, uint128, uint256, address, bytes)
        );

        initial_balance = address(this).balance;

        ITokenRootAlienSolana(token).meta{
            value: gasToValue(Gas.GET_TOKEN_ROOT_META_GAS, address(this).wid),
            bounce: true,
            callback: MultiVaultEverscaleSolanaEventAlien.receiveTokenMeta
        }();
    }

    function receiveTokenMeta(
        uint256 base_token_,
        string name,
        string symbol,
        uint8 decimals
    ) external override {
        require(msg.sender == token, ErrorCodes.SENDER_NOT_ROOT);

        base_token = base_token_;

        IProxyMultiVaultAlien_V8(proxy).deriveSolanaAlienTokenRoot{
            value: gasToValue(Gas.DERIVE_TOKEN_ROOT_GAS, address(this).wid),
            bounce: true,
            callback: MultiVaultEverscaleSolanaEventAlien.receiveAlienTokenRoot
        }(
            base_token,
            name,
            symbol,
            decimals
        );
    }

    function receiveAlienTokenRoot(
        address token_
    ) external override {
        require(msg.sender == proxy, ErrorCodes.WRONG_PROXY);

        expectedToken = token_;

        if (expectedToken == token) {
            _updateEventData();

            loadRelays();
        } else {
            setStatusRejected(1);
        }
    }

    function _updateEventData() internal {
        eventInitData.voteData.eventData = abi.encode(
            base_token,
            amount,
            recipient,
            solanaPayload
        );
    }

    function gasBackAddress() internal override view returns(address) {
        return remainingGasTo;
    }

    function getDecodedData() external override responsible returns(
        address proxy_,
        address tokenWallet_,
        address token_,
        address remainingGasTo_,
        uint128 amount_,
        uint256 recipient_,
        uint256 base_token_,
        bytes solanaPayload_

    ) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false}(
            proxy,
            tokenWallet,
            token,
            remainingGasTo,
            amount,
            recipient,
            base_token,
            solanaPayload
        );
    }

    onBounce(TvmSlice slice) external {
        uint32 selector = slice.decode(uint32);

        if (
            (selector == tvm.functionId(ITokenRootAlienSolana.meta) && msg.sender == token) ||
            (selector == tvm.functionId(IProxyMultiVaultAlien_V8.deriveSolanaAlienTokenRoot) && msg.sender == proxy)
        ) {
            setStatusRejected(2);
        }
    }
}

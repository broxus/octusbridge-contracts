pragma ever-solidity >= 0.62.0;

pragma AbiHeader pubkey;
pragma AbiHeader expire;

import "./../../../interfaces/proxy/multivault/alien/IProxyMultiVaultAlien_V9.tsol";

import "./../../../interfaces/event-contracts/multivault/solana/IMultiVaultSolanaEverscaleEventAlien.tsol";
import "./../../../interfaces/event-configuration-contracts/ISolanaEverscaleEventConfiguration.tsol";
import "./../../../interfaces/proxy/ISolanaEverscaleProxyExtended.tsol";
import "./../../../interfaces/alien-token-merge/merge-pool/IMergePool_V2.tsol";
import "./../../../interfaces/alien-token-merge/IMergeRouter.tsol";

import "./../../base/solana/SolanaEverscaleBaseEvent.tsol";

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/TIP3TokenRoot.tsol";


contract MultiVaultSolanaEverscaleEventAlien is
    SolanaEverscaleBaseEvent,
    IMultiVaultSolanaEverscaleEventAlien
{
    uint128 constant POWER_BASE = 10;

    uint256 base_token;

    string name;
    string symbol;
    uint8 decimals;

    uint128 amount;
    address recipient;

    uint64 value;
    uint expected_evers;
    TvmCell payload;

    address proxy;
    address token;

    address router;
    address pool;
    address canon;

    address target_token;
    uint128 target_amount;

    constructor(
        address _initializer,
        TvmCell _meta
    ) SolanaEverscaleBaseEvent(_initializer, _meta) {}

    function afterSignatureCheck(
        TvmSlice body,
        TvmCell
    ) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);

        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }

        return bodyCopy;
    }

    function onInit() override internal {
        (
            base_token,

            name,
            symbol,
            decimals,

            amount,
            recipient,

            value,
            expected_evers,
            payload
        ) = abi.decode(
            eventInitData.voteData.eventData,
            (
                uint256,
                string, string, uint8,
                uint128, address,
                uint64, uint256, TvmCell
            )
        );

        // Destroy event contract in case event contract is less than required
        if (address(this).balance < expected_evers) {
            recipient.transfer({
                value: 0,
                bounce: false,
                flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.DESTROY_IF_ZERO
            });

            return;
        }

        ISolanaEverscaleEventConfiguration(eventInitData.configuration).getDetails{
            value: gasToValue(Gas.REQUEST_CONFIGURATION_DETAILS_GAS, address(this).wid),
            callback: MultiVaultSolanaEverscaleEventAlien.receiveConfigurationDetails
        }();
    }

    function receiveConfigurationDetails(
        ISolanaEverscaleEventConfiguration.BasicConfiguration,
        ISolanaEverscaleEventConfiguration.SolanaEverscaleEventConfiguration _networkConfiguration,
        TvmCell
    ) external override {
        require(msg.sender == eventInitData.configuration);

        proxy = _networkConfiguration.proxy;

        IProxyMultiVaultAlien_V9(proxy).deriveSolanaAlienTokenRoot{
            value: gasToValue(Gas.DERIVE_TOKEN_ROOT_GAS, address(this).wid),
            callback: MultiVaultSolanaEverscaleEventAlien.receiveAlienTokenRoot
        }(
            base_token,
            name,
            symbol,
            decimals
        );
    }

    function receiveAlienTokenRoot(
        address token_
    ) external override {
        require(msg.sender == proxy, ErrorCodes.WRONG_PROXY);

        token = token_;

        TIP3TokenRoot(token).name{
            value: gasToValue(Gas.REQUEST_TOKEN_NAME_GAS, address(this).wid),
            bounce: true,
            callback: MultiVaultSolanaEverscaleEventAlien.receiveTokenName
        }();
    }

    function receiveTokenName(
        string // name
    ) external override {
        require(msg.sender == token, ErrorCodes.SENDER_NOT_ROOT);

        _requestMergeRouter();
    }

    function _requestMergeRouter() internal view {
        // Token exists, no need to deploy
        // Ask the router address
        IProxyMultiVaultAlien_V9(proxy).deriveMergeRouter{
            value: gasToValue(Gas.REQUEST_MERGE_ROUTER_GAS, address(this).wid),
            bounce: false,
            callback: MultiVaultSolanaEverscaleEventAlien.receiveMergeRouter
        }(token);
    }

    /// @notice Receives merge router address
    /// Can be called only by `proxy`
    /// @dev Sends request to the merge router to receive pool address
    /// In case merge router is not deployed yet - the onBounce message will be received
    /// @param router_ Router address
    function receiveMergeRouter(
        address router_
    ) external override {
        require(msg.sender == proxy, ErrorCodes.WRONG_PROXY);

        router = router_;

        // Request merge router pool
        IMergeRouter(router).getPool{
            value: gasToValue(Gas.REQUEST_POOL_GAS, address(this).wid),
            bounce: true,
            callback: MultiVaultSolanaEverscaleEventAlien.receiveMergeRouterPool
        }();
    }

    /// @notice Receives merge pool address
    /// Can be called only by `router`
    /// @dev In case pool is zero address - then finish transfer with `token` and `amount`
    /// Otherwise - request canon token from the pool
    /// @param pool_ Pool address
    function receiveMergeRouterPool(
        address pool_
    ) external override {
        require(msg.sender == router, ErrorCodes.WRONG_ROUTER);

        pool = pool_;

        if (pool.value == 0) {
            _finishSetup(token, amount);
        } else {
            IMergePool_V2(pool).getCanon{
                value: gasToValue(Gas.REQUEST_CANON_GAS, address(this).wid),
                bounce: false,
                callback: MultiVaultSolanaEverscaleEventAlien.receiveMergePoolCanon
            }();
        }
    }

    /// @notice Receives merge pool canon
    /// @dev Canon token can be disabled, in this case user receives `token`
    /// @param canon_ Canon token address
    /// @param canonToken_ Canon token
    function receiveMergePoolCanon(
        address canon_,
        IMergePool_V2.Token canonToken_
    ) external override {
        require(msg.sender == pool, ErrorCodes.WRONG_POOL);

        canon = canon_;

        if (canonToken_.enabled == false) {
            // Canon token specified but not enabled
            // fallback to the `token`

            _finishSetup(token, amount);
        } else {
            // Canon token specified and enabled

            uint128 canon_amount;

            if (decimals > canonToken_.decimals) {
                canon_amount = amount / (POWER_BASE**(decimals - canonToken_.decimals));
            } else if (decimals < canonToken_.decimals) {
                canon_amount = amount * (POWER_BASE**(canonToken_.decimals - decimals));
            } else {
                canon_amount = amount;
            }

            // In case the token decimals is more than canon decimals
            // And the transferred amount is too low
            // The canon_amount may be equal to zero. In this case - mints user the original token
            if (canon_amount == 0) {
                _finishSetup(token, amount);
            } else {
                _finishSetup(canon, canon_amount);
            }
        }
    }

    function onConfirm() internal override {
        TvmCell metaData = abi.encode(
            target_token,
            target_amount,
            recipient,
            payload
        );

        ISolanaEverscaleProxyExtended(eventInitData.configuration).onSolanaEventConfirmedExtended{
            flag: MsgFlag.ALL_NOT_RESERVED
        }(eventInitData, metaData, initializer);
    }

    function getDecodedData() external override responsible returns(
        uint256 base_token_,
        string name_,
        string symbol_,
        uint8 decimals_,
        uint128 amount_,
        address recipient_,
        uint64 value_,
        uint expected_evers_,
        TvmCell payload_,
        address proxy_,
        address token_
    ) {
        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false}(
            base_token,
            name,
            symbol,
            decimals,
            amount,
            recipient,
            value,
            expected_evers,
            payload,
            proxy,
            token
        );
    }

    onBounce(TvmSlice slice) external {
        uint32 selector = slice.load(uint32);

        if (
            selector == tvm.functionId(TIP3TokenRoot.name) &&
            msg.sender == token
        ) {
            // Failed to request token meta
            // Seems like corresponding token root not deployed so deploy it
            IProxyMultiVaultAlien_V9(proxy).deploySolanaAlienToken{
                value: Gas.getDeployTokenRootValue(),
                bounce: false
            }(
                base_token,
                name,
                symbol,
                decimals,
                recipient
            );

            _requestMergeRouter();
        } else if (
            selector == tvm.functionId(IMergeRouter.getPool) &&
            msg.sender == router
        ) {
            // Failed to request router's pool
            // Seems like corresponding router not deployed so deploy it
            IProxyMultiVaultAlien_V9(proxy).deployMergeRouter{
                value: gasToValue(Gas.DEPLOY_MERGE_ROUTER_GAS, address(this).wid),
                bounce: false
            }(token);

            _finishSetup(token, amount);
        }
    }

    function _finishSetup(
        address _target_token,
        uint128 _target_amount
    ) internal {
        target_token = _target_token;
        target_amount = _target_amount;

        loadRelays();
    }
}

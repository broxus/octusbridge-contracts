pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../base/solana/EverscaleSolanaBaseEvent.tsol";
import "../../interfaces/IEventNotificationReceiver.tsol";
import "../../interfaces/event-contracts/IEverscaleSolanaEvent.tsol";
import "../../../utils/ErrorCodes.tsol";
import "../../../utils/cell-encoder/StakingCellEncoder.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";


contract StakingEverscaleSolanaEvent is EverscaleSolanaBaseEvent, StakingCellEncoder {
    constructor(
        address _initializer,
        TvmCell _meta
    ) EverscaleSolanaBaseEvent(_initializer, _meta) {}

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function onConfirm() override internal {}

    function onReject() override internal {}

    function getDecodedData() public view responsible returns (uint32 round_num, uint256[] sol_keys, uint32 round_end) {
        (round_num, sol_keys, round_end) = decodeEverscaleSolanaStakingEventData(eventInitData.voteData.eventData);

        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} (round_num, sol_keys, round_end);
    }
}

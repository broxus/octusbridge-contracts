pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "../base/evm/EthereumEverscaleBaseEvent.tsol";
import "../../interfaces/IEventNotificationReceiver.tsol";
import "../../interfaces/event-contracts/IEthereumEverscaleEvent.tsol";
import "../../interfaces/proxy/IEthereumEverscaleProxy.tsol";
import "../../../utils/ErrorCodes.tsol";
import "../../../utils/cell-encoder/StakingCellEncoder.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";



contract StakingEthereumEverscaleEvent is EthereumEverscaleBaseEvent, StakingCellEncoder {

    constructor(
        address _initializer,
        TvmCell _meta
    ) EthereumEverscaleBaseEvent(_initializer, _meta) {}

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function onConfirm() override internal {
        IEthereumEverscaleProxy(eventInitData.configuration).onEventConfirmed{
            flag: MsgFlag.ALL_NOT_RESERVED
        }(eventInitData, initializer);
    }

    function onReject() override internal {
        transferAll(initializer);
    }

    function getDecodedData() public view responsible returns (
        uint160 eth_addr,
        int8 wk_id,
        uint256 ton_addr_body,
        address ton_staker_addr
    ) {
        (eth_addr, wk_id, ton_addr_body) = decodeEthereumEverscaleStakingEventData(eventInitData.voteData.eventData);

        ton_staker_addr = address.makeAddrStd(wk_id, ton_addr_body);

        return {value: 0, flag: MsgFlag.REMAINING_GAS, bounce: false} (eth_addr, wk_id, ton_addr_body, ton_staker_addr);
    }
}

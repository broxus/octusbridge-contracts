pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "./../base/evm/EverscaleEthereumBaseEvent.tsol";
import "./../../interfaces/IEventNotificationReceiver.tsol";
import "./../../interfaces/event-contracts/IEverscaleEthereumEvent.tsol";
import "../../../utils/cell-encoder/DaoCellEncoder.tsol";
import "./../../../utils/ErrorCodes.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

/*
    @title DAO Ethereum Action event configuration
    @dev This implementation is used for executing DAO actions in EVM based networks
*/
contract DaoEthereumActionEvent is EverscaleEthereumBaseEvent, DaoCellEncoder {

    constructor(
        address _initializer,
        TvmCell _meta
    ) EverscaleEthereumBaseEvent(_initializer, _meta) {}

    function afterSignatureCheck(TvmSlice body, TvmCell /*message*/) private inline view returns (TvmSlice) {
        body.load(uint64, uint32);
        TvmSlice bodyCopy = body;
        uint32 functionId = body.load(uint32);
        if (isExternalVoteCall(functionId)){
            require(votes[msg.pubkey()] == Vote.Empty, ErrorCodes.KEY_VOTE_NOT_EMPTY);
        }
        return bodyCopy;
    }

    function getDecodedData() public view responsible returns (
        address _gasBackAddress,
        uint32 chainId,
        ActionStructure.EthActionStripped[] actions
    ) {
        (
            int8 gasBackAddressWid,
            uint256 gasBackAddressValue,
            uint32 _chainId,
            ActionStructure.EthActionStripped[] _actions
        ) = decodeDaoEthereumActionData(eventInitData.voteData.eventData);

        _gasBackAddress = address.makeAddrStd(gasBackAddressWid, gasBackAddressValue);

        return {value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} (_gasBackAddress, _chainId, _actions);
    }

    function gasBackAddress() internal override view returns(address) {
        (address gasBackAddress_,,) = getDecodedData();

        return gasBackAddress_;
    }
}

pragma ever-solidity >= 0.62.0;
pragma AbiHeader pubkey;


import "./../../../utils/TransferUtils.tsol";
import "./../../../utils/ErrorCodes.tsol";
import "./../../interfaces/alien-token-merge/merge-pool/IMergePool_V2.tsol";
import "./../../interfaces/proxy/multivault/alien/IProxyMultiVaultAlien_V9.tsol";
import "./../../interfaces/event-contracts/multivault/evm/IEVMCallback.tsol";
import "./../../interfaces/event-contracts/IEverscaleSolanaEvent.tsol";
import "./../../interfaces/proxy/INetworks.tsol";

import "ton-eth-bridge-token-contracts/contracts/interfaces/IAcceptTokensBurnCallback.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/ITokenRoot.tsol";

import "@broxus/contracts/contracts/access/InternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";

import "../../libraries/Gas.tsol";


/// @title Merge pool contract
/// Basically allows to swap different alien tokens on 1:1 ratio
/// Must be deployed by the ProxyMultiVaultAlien
/// @dev Differences from the V5:
/// 1. Added TVM-TVM support
contract MergePool_V6 is
    IMergePool_V2,
    InternalOwner,
    RandomNonce,
    TransferUtils,
    IAcceptTokensBurnCallback,
    IEVMCallback,
    INetworks
{
    address static proxy;

    uint8 public version;

    mapping (address => Token) tokens;
    address public manager;
    address canon;

    modifier tokenExists(address token) {
        require(tokens.exists(token), ErrorCodes.TOKEN_NOT_EXISTS);

        _;
    }

    modifier onlyOwnerOrManager() {
        require(msg.sender == owner || msg.sender == manager, ErrorCodes.ONLY_OWNER_OR_MANAGER);

        _;
    }

    modifier onlyProxy() {
        require(msg.sender == proxy, ErrorCodes.WRONG_PROXY);

        _;
    }

    constructor() {
        revert();
    }

    function acceptUpgrade(
        TvmCell code,
        uint8 newVersion
    ) external override onlyProxy {
        if (version == newVersion) return;

        address[] tokens_;
        uint256 canonId;
        uint256 counter;

        for ((address token, ): tokens) {
            tokens_.push(token);

            if (token == canon) {
                canonId = counter;
            }

            counter++;
        }

        TvmCell data = abi.encode(
            proxy,
            _randomNonce,
            newVersion,
            tokens_,
            canonId,
            owner,
            manager
        );

        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(
        TvmCell data
    ) private {
        tvm.resetStorage();

        (
            address proxy_,
            uint256 _randomNonce_,
            uint8 version_,
            address[] tokens_,
            uint256 canonId,
            address owner_,
            address manager_
        ) = abi.decode(
            data,
            (
                address, uint256, uint8,
                address[], uint256, address, address
            )
        );

        proxy = proxy_;
        _randomNonce = _randomNonce_;
        version = version_;

        require(tokens_.length > 0, ErrorCodes.TOKEN_NOT_EXISTS);
        require(msg.sender == proxy, ErrorCodes.WRONG_PROXY);
        require(canonId <= tokens_.length - 1, ErrorCodes.WRONG_CANON_ID);

        canon = tokens_[canonId];

        setOwnership(owner_);

        manager = manager_;

        // Request decimals for every token
        for (address token: tokens_) {
            tokens[token] = Token({
                decimals: 0,
                enabled: false
            });

            _requestTokenDecimals(token);
        }
    }

    function receiveTokenDecimals(
        uint8 decimals
    ) external override tokenExists(msg.sender) {
        tokens[msg.sender].decimals = decimals;
    }

    function setManager(
        address _manager
    ) external override onlyOwner cashBack {
        manager = _manager;
    }

    /// @notice Remove token from the pool
    /// Token must be presented in the pool
    /// Token must be different from the canon. Otherwise set new canon first.
    /// Can be called only by `owner` or `manager`
    /// @param token Token address
    function removeToken(
        address token
    ) external override onlyOwnerOrManager tokenExists(token) cashBack {
        require(token != canon, ErrorCodes.TOKEN_IS_CANON);

        delete tokens[token];
    }

    /// @notice Add new token to the pool
    /// Token must not be presented in the pool
    /// Can be called only by `owner` or `manager`
    /// @param token Token address
    function addToken(
        address token
    ) external override onlyOwnerOrManager cashBack {
        require(!tokens.exists(token), ErrorCodes.TOKEN_ALREADY_EXISTS);

        tokens[token] = Token({
            decimals: 0,
            enabled: false
        });

        _requestTokenDecimals(token);
    }

    /// @notice Set `canon` token
    /// Can be called only by `owner` or `manager`
    /// @param token token address
    function setCanon(
        address token
    ) external override onlyOwnerOrManager tokenExists(token) cashBack {
        require(tokens[token].enabled, ErrorCodes.TOKEN_NOT_ENABLED);

        canon = token;
    }

    /// @notice Enable token
    /// Can be called only by `owner` or `manager`
    /// Token must be presented in the pool
    /// @param token Token address
    function enableToken(
        address token
    ) public override onlyOwnerOrManager tokenExists(token) cashBack {
        require(tokens[token].decimals > 0, ErrorCodes.TOKEN_DECIMALS_IS_ZERO);
        _setTokenStatus(token, true);
    }

    function enableAll() external override onlyOwnerOrManager cashBack {
        for ((address token,): tokens) {
            require(tokens[token].decimals > 0, ErrorCodes.TOKEN_DECIMALS_IS_ZERO);
            _setTokenStatus(token, true);
        }
    }

    /// @notice Disable token
    /// Can be called only by `owner` or `manager`
    /// Token must be presented in the pool
    /// Users cant swap tokens to the disabled tokens
    /// @param token Token address
    function disableToken(
        address token
    ) public override onlyOwnerOrManager tokenExists(token) cashBack {
        _setTokenStatus(token, false);
    }

    function disableAll() external override onlyOwnerOrManager cashBack {
        for ((address token,): tokens) {
            _setTokenStatus(token, false);
        }
    }

    /// @notice Get canon token
    /// @return Canon token address
    function getCanon() external override responsible returns (address, Token) {
        return{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} (canon, tokens[canon]);
    }

    /// @notice Get token pools, decimals and canon token
    /// @return _tokens Pool tokens, mapping token => decimals
    /// @return _canon Canon token
    function getTokens() external override responsible returns(
        mapping(address => Token) _tokens,
        address _canon
    ) {
        return{value: 0, bounce: false, flag: MsgFlag.REMAINING_GAS} (tokens, canon);
    }

    /// @notice Callback for accepting tokens burn
    /// Burned token must be presented in the pool, otherwise tokens will be lost
    /// @param payload Contains cell encoded (BurnType, targetToken, operationPayload)
    /// Operation payload depends on the requested operation
    /// - For swap, operation payload is empty cell
    /// - For withdraw, operation payload in (uint160 recipient)
    function onAcceptTokensBurn(
        uint128 _amount,
        address walletOwner,
        address sender,
        address remainingGasTo,
        TvmCell payload
    ) external override tokenExists(msg.sender) reserveBalance {
        (
            uint32 nonce,
            BurnType burnType,
            address targetToken,
            TvmCell operationPayload
        ) = abi.decode(payload, (uint32, BurnType, address, TvmCell));

        uint128 amount = _convertDecimals(
            _amount,
            msg.sender,
            targetToken
        );

        if (tokens[targetToken].enabled == false || tokens[msg.sender].enabled == false) {
            // Target token exists in the merge pool but not enabled yet
            // Or burned token is disabled
            // Mint back burned tokens
            _mintTokens(msg.sender, _amount, walletOwner, remainingGasTo, operationPayload);
        } else if (amount == 0) {
            // Target token enabled but amount is zero, after conversation to the target decimals
            // Mint back burned tokens
            _mintTokens(msg.sender, _amount, walletOwner, remainingGasTo, operationPayload);
        } else if (burnType == BurnType.Swap) {
            // Target token enabled and swap requested
            // Mint specified token and amount, normalized by decimals
            _mintTokens(targetToken, amount, walletOwner, remainingGasTo, operationPayload);
        } else {
            (Network network, TvmCell withdrawPayload) = abi.decode(operationPayload, (Network, TvmCell));

            if (network == Network.Solana) {
                (
                    uint256 recipient,
                    IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executeAccounts,
                    bool executePayloadNeeded,
                    IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[] executePayloadAccounts,
                    bytes solanaPayload
                ) = abi.decode(withdrawPayload, (uint256, IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[], bool, IEverscaleSolanaEvent.EverscaleSolanaExecuteAccount[], bytes));

                IProxyMultiVaultAlien_V9(proxy).withdrawTokensToSolanaByMergePool{
                    bounce: false,
                    value: 0,
                    flag: MsgFlag.ALL_NOT_RESERVED
                }(
                    _randomNonce,
                    nonce,
                    targetToken,
                    amount,
                    recipient,
                    remainingGasTo,
                    sender,
                    executeAccounts,
                    executePayloadNeeded,
                    executePayloadAccounts,
                    solanaPayload
                );
            } else if (network == Network.EVM) {
                // Target token enabled and bridge withdraw requested
                // Request withdraw on the bridge
                (
                    uint160 recipient,
                    EVMCallback callback
                ) = abi.decode(withdrawPayload, (uint160, EVMCallback));

                IProxyMultiVaultAlien_V9(proxy).withdrawTokensToEVMByMergePool{
                    bounce: false,
                    value: 0,
                    flag: MsgFlag.ALL_NOT_RESERVED
                }(
                    _randomNonce,
                    nonce,
                    targetToken,
                    amount,
                    recipient,
                    remainingGasTo,
                    sender,
                    callback
                );
            } else if (network == Network.TVM) {
                IProxyMultiVaultAlien_V9(proxy).withdrawTokensToTVMByMergePool{
                        bounce: false,
                        value: 0,
                        flag: MsgFlag.ALL_NOT_RESERVED
                    }(
                    _randomNonce,
                    nonce,
                    targetToken,
                    amount,
                    remainingGasTo,
                    sender,
                    withdrawPayload
                );
            }
        }
    }

    function _requestTokenDecimals(address token) internal pure {
        ITokenRoot(token).decimals{
            value: gasToValue(Gas.REQUEST_TOKEN_DECIMALS_GAS, address(this).wid),
            bounce: false,
            callback: MergePool_V6.receiveTokenDecimals
        }();
    }

    function _mintTokens(
        address token,
        uint128 amount,
        address walletOwner,
        address remainingGasTo,
        TvmCell payload
    ) internal view {
        IProxyMultiVaultAlien_V9(proxy).mintTokensByMergePool{
            bounce: false,
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED
        }(
            _randomNonce,
            token,
            amount,
            walletOwner,
            remainingGasTo,
            payload
        );
    }

    function _convertDecimals(
        uint128 amount,
        address from_,
        address to_
    ) internal view returns (uint128) {
        uint8 from_decimals = tokens[from_].decimals;
        uint8 to_decimals = tokens[to_].decimals;

        uint128 base = 10;

        if (from_decimals == to_decimals) {
            return amount;
        } else if (from_decimals > to_decimals) {
            return amount / (base ** uint128(from_decimals - to_decimals));
        } else {
            return amount * (base ** uint128(to_decimals - from_decimals));
        }
    }

    function _setTokenStatus(address token, bool status) internal {
        tokens[token].enabled = status;
    }
}

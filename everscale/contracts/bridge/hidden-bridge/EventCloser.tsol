pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;

import "@broxus/contracts/contracts/access/ExternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";

import "./../../utils/TransferUtils.tsol";

import "./../event-contracts/base/evm/EverscaleEthereumBaseEvent.tsol";

import './EventCreditGas.tsol';


/// @title Event closer
/// @dev Used as part of credit-transfer pipeline, specifically for ever-evm transfers
/// Allows credit backend to call .close on the event contracts, where remainingGasTo = EventCloser
/// Receives the EVERs and immediately transfers them to the EventDeployer contract
contract EventCloser is ExternalOwner, RandomNonce, TransferUtils, CheckPubKey {
    address static factory;

    address[] public deployers;
    uint8 public deployerIndex;

    constructor(
        uint owner_,
        address[] deployers_
    ) public checkPubKey {
        require(msg.sender == factory, ErrorCodes.ZERO_ADDRESS);
        for (address deployer: deployers_) {
            require(deployer != address(0), ErrorCodes.ZERO_ADDRESS);
        }

        tvm.accept();

        setOwnership(owner_);

        deployers = deployers_;
        deployerIndex = uint8(rnd.next() % deployers.length);
    }

    function _targetBalance() internal pure override returns (uint128) {
        return EventCreditGas.EVENT_CLOSER_INITIAL_BALANCE;
    }

    /// @notice Batch close for ever-evm event-contracts
    /// @dev Can be called only by the external owner
    /// @param events List of event-contracts addresses
    function close(
        address[] events
    ) external view onlyOwner {
        tvm.accept();

        for (address e: events) {
            EverscaleEthereumBaseEvent(e).close{
                bounce: true,
                flag: MsgFlag.IGNORE_ERRORS,
                value: gasToValue(EventCreditGas.CLOSE_EVENT_GAS, address(this).wid)
            }();
        }
    }

    receive() external reserveTargetBalance {
        deployers[deployerIndex].transfer({
            bounce: false,
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED + MsgFlag.IGNORE_ERRORS
        });

        deployerIndex = (deployerIndex + 1) % uint8(deployers.length);
    }
}

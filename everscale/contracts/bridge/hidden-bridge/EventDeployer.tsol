pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;
pragma AbiHeader pubkey;


import "@broxus/contracts/contracts/access/ExternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";

import "./../interfaces/event-contracts/IEthereumEverscaleEvent.tsol";
import "./../interfaces/event-configuration-contracts/IEthereumEverscaleEventConfiguration.tsol";
import "./../interfaces/event-contracts/ISolanaEverscaleEvent.tsol";
import "./../interfaces/event-configuration-contracts/ISolanaEverscaleEventConfiguration.tsol";
import "./../interfaces/event-contracts/ITvmTvmEvent.tsol";
import "./../interfaces/event-configuration-contracts/ITvmTvmEventConfiguration.tsol";
import "../../utils/ErrorCodes.tsol";

import './EventCreditGas.tsol';


/// @title Event deployer
/// @dev Used as part of credit-transfer pipeline, specifically for evm-ever transfers
/// Allows credit backend to deploy multiple event-contacts at once
contract EventDeployer is ExternalOwner, RandomNonce, CheckPubKey {
    address public static factory;

    constructor(uint owner_) checkPubKey {
        require(owner_ != 0, ErrorCodes.ZERO_ADDRESS);
        require(msg.sender == factory, ErrorCodes.ZERO_ADDRESS);
        tvm.accept();

        setOwnership(owner_);
    }

    struct DeployRequestEVM {
        address configuration;
        IEthereumEverscaleEvent.EthereumEverscaleEventVoteData[] eventsVoteData;
        uint128[] values;
        uint128 value;
    }

    struct DeployRequestSolana {
        address configuration;
        ISolanaEverscaleEvent.SolanaEverscaleEventVoteData[] eventsVoteData;
        uint128[] values;
        uint128 value;
    }

    struct DeployRequestTVM {
        address configuration;
        ITvmTvmEvent.TvmTvmEventVoteData[] eventsVoteData;
        uint128[] values;
        uint128 value;
    }

    function drain(
        address receiver
    ) external view {
        require(msg.sender == factory, 101);

        tvm.rawReserve(EventCreditGas.EVENT_DEPLOYER_INITIAL_BALANCE, 0);

        receiver.transfer({
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            bounce: true
        });
    }

    /// @notice Batch events deployment
    /// @dev Can be called only by external owner
    /// @param requestsEVM List of EVM requests, one request per event configuration
    /// @param requestsSolana List of Solana requests, one request per event configuration
    /// @param requestsTVM List of TVM requests, one request per event configuration
    function deployEvents(
        DeployRequestEVM[] requestsEVM,
        DeployRequestSolana[] requestsSolana,
        DeployRequestTVM[] requestsTVM
    ) external onlyOwner view {
        tvm.accept();

        for (DeployRequestEVM request: requestsEVM) {
            IEthereumEverscaleEventConfiguration(request.configuration).deployEvents{
                value: request.value,
                bounce: true,
                flag: MsgFlag.IGNORE_ERRORS
            }(request.eventsVoteData, request.values);
        }

        for (DeployRequestSolana request: requestsSolana) {
            ISolanaEverscaleEventConfiguration(request.configuration).deployEvents{
                value: request.value,
                bounce: true,
                flag: 0
            }(request.eventsVoteData, request.values);
        }

        for (DeployRequestTVM request: requestsTVM) {
            ITvmTvmEventConfiguration(request.configuration).deployEvents{
                value: request.value,
                bounce: true,
                flag: 0
            }(request.eventsVoteData, request.values);
        }
    }
}

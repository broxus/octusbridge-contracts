pragma ever-solidity >= 0.62.0;

pragma AbiHeader expire;

import "@broxus/contracts/contracts/libraries/MsgFlag.tsol";
import "@broxus/contracts/contracts/access/InternalOwner.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";

import "./../../../utils/TransferUtils.tsol";
import "./../../interfaces/proxy/INetworks.tsol";
import "./../../interfaces/alien-token-merge/merge-pool/IMergePool_V2.tsol";

import "ton-eth-bridge-token-contracts/contracts/interfaces/IAcceptTokensTransferCallback.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/IAcceptTokensMintCallback.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/IBurnableTokenWallet.tsol";
import "ton-eth-bridge-token-contracts/contracts/interfaces/ITokenWallet.tsol";
import "ton-eth-bridge-token-contracts/contracts/TokenWalletPlatform.tsol";
import "./../../../utils/ErrorCodes.tsol";
import "./../EventCreditGas.tsol";


/// @title Mediator
/// @notice Used as part of hidden bridge for evm-ever-evm token transfers
/// An example:
/// 1. ETH USDT -> EVER USDT -> BNB USDT
/// 1.1 Mediator accepts EVER USDT mint and decodes the payload
/// 1.2 Payload says "Burn tokens in favour of proxy with some payload"
/// 1.3 Burn initiates creating an ever-evm event contract with BNB USDT withdrawal
contract Mediator is
    IAcceptTokensTransferCallback,
    IAcceptTokensMintCallback,
    INetworks,
    TransferUtils,
    InternalOwner,
    RandomNonce,
    CheckPubKey
{
    enum Operation {
        BurnToAlienProxy,
        BurnToMergePool,
        TransferToNativeProxy
    }

    TvmCell public alienTokenWalletPlatformCode;
    address public nativeProxy;
    address public eventCloser;
    address public eventDeployer;

    constructor(
        address _owner,
        address _nativeProxy,
        TvmCell _alienTokenWalletPlatformCode
    ) public checkPubKey {
        require(_owner != address(0), ErrorCodes.ZERO_ADDRESS);
        require(_nativeProxy != address(0), ErrorCodes.ZERO_ADDRESS);
        tvm.accept();

        setOwnership(_owner);
        nativeProxy = _nativeProxy;
        alienTokenWalletPlatformCode = _alienTokenWalletPlatformCode;
    }

    function setNativeProxy(
        address _nativeProxy
    ) external onlyOwner cashBack {
        require(_nativeProxy != address(0), ErrorCodes.ZERO_ADDRESS);
        nativeProxy = _nativeProxy;
    }

    /// @notice Accept incoming mint
    function onAcceptTokensMint(
        address,
        uint128 amount,
        address remainingGasTo,
        TvmCell payloadWithNonce
    ) external override reserveAtLeastTargetBalance {
        _handleTokens(
            payloadWithNonce,
            msg.sender,
            amount,
            remainingGasTo
        );
    }

    /// @notice Accept incoming transfer
    function onAcceptTokensTransfer(
        address,
        uint128 amount,
        address sender,
        address,
        address remainingGasTo,
        TvmCell payloadWithNonce
    ) external override reserveAtLeastTargetBalance {
        require(sender == nativeProxy, ErrorCodes.NOT_NATIVE_PROXY);

        _handleTokens(
            payloadWithNonce,
            msg.sender,
            amount,
            remainingGasTo
        );
    }

    function _handleTokens(
        TvmCell payloadWithNonce,
        address wallet,
        uint128 amount,
        address remainingGasTo
    ) internal view {
        (uint32 nonce, TvmCell payload) = abi.decode(payloadWithNonce, (uint32, TvmCell));

        remainingGasTo = remainingGasTo == eventDeployer ? eventCloser : remainingGasTo;

        (
            Operation operation,
            address proxy,
            TvmCell operationPayload
        ) = abi.decode(payload, (Operation, address, TvmCell));

        TvmCell withdrawPayload = _encodeWithdrawPayload(operation, operationPayload, nonce);

        if (operation == Operation.BurnToAlienProxy || operation == Operation.BurnToMergePool) {
            _burn(wallet, amount, proxy, remainingGasTo, withdrawPayload);
        } else if (operation == Operation.TransferToNativeProxy) {
            _transfer(wallet, amount, proxy, remainingGasTo, withdrawPayload);
        }
    }

    function _encodeWithdrawPayload(
        Operation operation,
        TvmCell payload,
        uint32 nonce
    ) internal pure returns(TvmCell withdrawPayload) {
        if (operation == Operation.BurnToAlienProxy) {
            (
                , // ignore nonce
                Network network,
                TvmCell burnPayload
            ) = abi.decode(payload, (uint32, Network, TvmCell));

            withdrawPayload = abi.encode(nonce, network, burnPayload);
        } else if (operation == Operation.BurnToMergePool) {
            (
                , // ignore nonce
                IMergePool_V2.BurnType burnType,
                address targetToken,
                TvmCell operationPayload
            ) = abi.decode(payload, (uint32, IMergePool_V2.BurnType, address, TvmCell));

            withdrawPayload = abi.encode(nonce, burnType, targetToken, operationPayload);
        } else if (operation == Operation.TransferToNativeProxy) {
            (
                , // ignore nonce
                Network network,
                TvmCell transferPayload
            ) = abi.decode(payload, (uint32, Network, TvmCell));

            withdrawPayload = abi.encode(nonce, network, transferPayload);
        } else {
            revert(ErrorCodes.UNKNOWN_MEDIATOR_OPERATION);
        }
    }

    function _transfer(
        address wallet,
        uint128 amount,
        address proxy,
        address remainingGasTo,
        TvmCell payload
    ) internal pure {
        ITokenWallet(wallet).transfer{
            bounce: false,
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED
        }(amount, proxy, EventCreditGas.getDeployTokenWalletValue(), remainingGasTo, true, payload);
    }

    function _burn(
        address wallet,
        uint128 amount,
        address proxy,
        address remainingGasTo,
        TvmCell payload
    ) internal pure {
        IBurnableTokenWallet(wallet).burn{
            bounce: false,
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED
        }(amount, remainingGasTo, proxy, payload);
    }

    function _deriveAlienTokenWallet(
        address root
    ) internal view returns(address) {
        TvmCell stateInit = tvm.buildStateInit({
            contr: TokenWalletPlatform,
            varInit: {
                root: root,
                owner: address(this)
            },
            pubkey: 0,
            code: alienTokenWalletPlatformCode
        });

        return address(tvm.hash(stateInit));
    }

    function setCreditBackend(
        address _eventCloser,
        address _eventDeployer
    ) external onlyOwner {
        require(_eventCloser != address(0), ErrorCodes.ZERO_ADDRESS);
        require(_eventDeployer != address(0), ErrorCodes.ZERO_ADDRESS);

        eventCloser = _eventCloser;
        eventDeployer = _eventDeployer;
    }

    function upgrade(
        TvmCell code
    ) external onlyOwner {
        TvmCell data = abi.encode(
            owner,
            nativeProxy,
            alienTokenWalletPlatformCode,
            _randomNonce,
            eventCloser,
            eventDeployer
        );

        tvm.setcode(code);
        tvm.setCurrentCode(code);

        onCodeUpgrade(data);
    }

    function onCodeUpgrade(
        TvmCell data
    ) private {
        tvm.resetStorage();

        (
            owner,
            nativeProxy,
            alienTokenWalletPlatformCode,
            _randomNonce
        ) = abi.decode(data, (address, address, TvmCell, uint));
    }
}

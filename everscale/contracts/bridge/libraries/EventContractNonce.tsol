// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "../interfaces/event-contracts/IEthereumEverscaleEvent.tsol";
import "../interfaces/event-contracts/IEverscaleEthereumEvent.tsol";
import "../interfaces/event-contracts/IEverscaleSolanaEvent.tsol";
import "../interfaces/event-contracts/ISolanaEverscaleEvent.tsol";
import "../interfaces/event-contracts/ITVMEverscaleEvent.tsol";


library EventContractNonce {
    uint constant U32_MAX = 2**32 - 1;

    function _calculateNonce(
        IEthereumEverscaleEvent.EthereumEverscaleEventInitData eventInitData
    ) internal returns (uint32) {
        uint dataHash = tvm.hash(abi.encode(eventInitData));

        return uint32(dataHash % U32_MAX);
    }

    function _calculateNonce(
        IEverscaleEthereumEvent.EverscaleEthereumEventInitData eventInitData
    ) internal returns (uint32) {
        uint dataHash = tvm.hash(abi.encode(eventInitData));

        return uint32(dataHash % U32_MAX);
    }

    function _calculateNonce(
        ISolanaEverscaleEvent.SolanaEverscaleEventInitData eventInitData
    ) internal returns (uint32) {
        uint dataHash = tvm.hash(abi.encode(eventInitData));

        return uint32(dataHash % U32_MAX);
    }

    function _calculateNonce(
        IEverscaleSolanaEvent.EverscaleSolanaEventInitData eventInitData
    ) internal returns (uint32) {
        uint dataHash = tvm.hash(abi.encode(eventInitData));

        return uint32(dataHash % U32_MAX);
    }

    function _calculateNonce(
        ITVMEverscaleEvent.TVMEverscaleEventInitData eventInitData
    ) internal returns (uint32) {
        uint dataHash = tvm.hash(abi.encode(eventInitData));

        return uint32(dataHash % U32_MAX);
    }
}

pragma ever-solidity >= 0.62.0;


import "./../interfaces/event-configuration-contracts/ISolanaEverscaleEventConfiguration.tsol";

import "./../../utils/TransferUtils.tsol";
import "./../event-configuration-contracts/solana/SolanaEverscaleEventConfiguration.tsol";

import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";


contract SolanaEverscaleEventConfigurationFactory is TransferUtils, RandomNonce, CheckPubKey {
    TvmCell public configurationCode;

    constructor(TvmCell _configurationCode) public checkPubKey {
        tvm.accept();

        configurationCode = _configurationCode;
    }

    function deploy(
        address _owner,
        ISolanaEverscaleEventConfiguration.BasicConfiguration basicConfiguration,
        ISolanaEverscaleEventConfiguration.SolanaEverscaleEventConfiguration networkConfiguration
    ) external view reserveMinBalance(Gas.CONFIGURATION_FACTORY_INITIAL_BALANCE) {
        TvmCell _meta;

        new SolanaEverscaleEventConfiguration{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            code: configurationCode,
            pubkey: 0,
            varInit: {
                basicConfiguration: basicConfiguration,
                networkConfiguration: networkConfiguration
            }
        }(_owner, _meta);
    }

    function deriveConfigurationAddress(
        ISolanaEverscaleEventConfiguration.BasicConfiguration basicConfiguration,
        ISolanaEverscaleEventConfiguration.SolanaEverscaleEventConfiguration networkConfiguration
    ) external view returns(address) {
        TvmCell stateInit = tvm.buildStateInit({
            contr: SolanaEverscaleEventConfiguration,
            varInit: {
                basicConfiguration: basicConfiguration,
                networkConfiguration: networkConfiguration
            },
            pubkey: 0,
            code: configurationCode
        });

        return address(tvm.hash(stateInit));
    }
}

pragma ever-solidity >= 0.62.0;


import "./../../utils/TransferUtils.tsol";
import "@broxus/contracts/contracts/utils/RandomNonce.tsol";
import "@broxus/contracts/contracts/utils/CheckPubKey.tsol";
import "./../event-configuration-contracts/evm/EthereumEverscaleEventConfiguration.tsol";
import "./../interfaces/event-configuration-contracts/IEthereumEverscaleEventConfiguration.tsol";


contract EthereumEverscaleEventConfigurationFactory is TransferUtils, RandomNonce, CheckPubKey {
    TvmCell public configurationCode;

    constructor(TvmCell _configurationCode) checkPubKey {
        tvm.accept();

        configurationCode = _configurationCode;
    }

    function deploy(
        address _owner,
        uint64 _flags,
        IBasicEventConfiguration.BasicConfiguration basicConfiguration,
        IEthereumEverscaleEventConfiguration.EthereumEverscaleEventConfiguration networkConfiguration
    ) external view reserveMinBalance(Gas.CONFIGURATION_FACTORY_INITIAL_BALANCE) {
        TvmCell _meta;

        new EthereumEverscaleEventConfiguration{
            value: 0,
            flag: MsgFlag.ALL_NOT_RESERVED,
            code: configurationCode,
            pubkey: 0,
            varInit: {
                basicConfiguration: basicConfiguration,
                networkConfiguration: networkConfiguration
            }
        }(_owner, _meta, _flags);
    }

    function deriveConfigurationAddress(
        IBasicEventConfiguration.BasicConfiguration basicConfiguration,
        IEthereumEverscaleEventConfiguration.EthereumEverscaleEventConfiguration networkConfiguration
    ) external view returns(address) {
        TvmCell stateInit = tvm.buildStateInit({
            contr: EthereumEverscaleEventConfiguration,
            varInit: {
                basicConfiguration: basicConfiguration,
                networkConfiguration: networkConfiguration
            },
            pubkey: 0,
            code: configurationCode
        });

        return address(tvm.hash(stateInit));
    }
}
